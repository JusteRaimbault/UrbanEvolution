%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: /Users/juste/ComplexSystems/UrbanEvolution/Docs/Seminars/20201209_UTorontoUGP/communication/.texpadtmp/comment.dvi
%%CreationDate: Tue Dec  8 16:32:55 2020
%%Pages: 4
%%PageOrder: Ascend
%%BoundingBox: 0 0 363 273
%%DocumentFonts: NimbusSanL-Regu CMSS8 CMSY10 SFTT1095
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /Library/TeX/texbin/dvips -o
%+ /Users/juste/ComplexSystems/UrbanEvolution/Docs/Seminars/20201209_UTorontoUGP/communication/.texpadtmp/comment.ps
%+ /Users/juste/ComplexSystems/UrbanEvolution/Docs/Seminars/20201209_UTorontoUGP/communication/.texpadtmp/comment.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2020.12.08:1632
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: cm-super-t1.enc 0 0
% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto pgffill 16.0002 0.49998 moveto 18.00021 2.00002 lineto
16.0002 3.50003 lineto pgffill  grestore} bind def

 /pgf2{gsave exec 2.39105 3.38733 8.26909 0.79701 pgfe pgfstr  grestore}
bind def

 /pgf3{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto 16.0002 0.49998 moveto 18.00021 2.00002 lineto 16.0002
3.50003 lineto pgffill  grestore} bind def

 /pgf4{gsave exec 2.39105 3.38733 6.97394 0.0 pgfe 7.80008 2.40001
moveto 7.80008 3.20003 lineto 11.20012 3.20003 lineto 11.20012 0.8
lineto 10.4001 0.8 lineto 8.6001 3.20003 moveto 8.6001 4.00005 lineto
12.00015 4.00005 lineto 12.00015 1.60002 lineto 11.20012 1.60002 lineto
pgfstr  grestore} bind def

 /pgf5{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto 16.0002 0.49998 moveto 18.00021 2.00002 lineto 16.0002
3.50003 lineto pgffill 0.59776 pgfw 8.00009 4.00005 moveto 11.00012
4.00005 lineto 9.00009 2.00002 moveto 12.00015 2.00002 lineto 8.00009
1.0 moveto 11.00012 1.0 lineto 9.00009 0.0 moveto 12.00015 0.0 lineto
pgfstr  grestore} bind def

 /pgf6{gsave exec 0.59776 pgfw 9.00009 3.00003 moveto 12.00015 3.00003
lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto 16.0002 0.49998 moveto 18.00021 2.00002 lineto 16.0002
3.50003 lineto pgffill 0.59776 pgfw 8.00009 1.0 moveto 11.00012 1.0
lineto 9.00009 0.0 moveto 12.00015 0.0 lineto pgfstr  grestore} bind
def

 /pgf8{gsave exec 0.59776 pgfw 8.00009 4.00005 moveto 11.00012 4.00005
lineto 9.00009 3.00003 moveto 12.00015 3.00003 lineto 9.00009 2.00002
moveto 12.00015 2.00002 lineto pgfstr  grestore} bind def

 /pgf9{gsave exec 10.0001 -0.49998 moveto 10.0001 4.50003 lineto pgfstr
 grestore} bind def

 /pgf10{gsave exec 0.59776 pgfw 4.00005 4.00005 moveto 7.00008 4.00005
lineto 5.00005 3.00003 moveto 8.00009 3.00003 lineto 5.00005 2.00002
moveto 8.00009 2.00002 lineto 3.00003 1.0 moveto 7.00008 1.0 lineto
5.00005 0.0 moveto 8.00009 0.0 lineto 12.00015 3.00003 moveto 15.00018
3.00003 lineto 13.00015 2.00002 moveto 16.0002 2.00002 lineto 13.00015
1.0 moveto 16.0002 1.0 lineto pgfstr  grestore} bind def

 /pgf11{gsave exec 0.59776 pgfw 8.00009 4.00005 moveto 11.00012 4.00005
lineto 9.00009 3.00003 moveto 12.00015 3.00003 lineto 9.00009 2.00002
moveto 12.00015 2.00002 lineto 8.00009 1.0 moveto 11.00012 1.0 lineto
9.00009 0.0 moveto 12.00015 0.0 lineto pgfstr  grestore} bind def

 /pgf12{gsave exec 0.59776 pgfw 10.4001 1.60002 moveto 12.00015 0.0
lineto pgfstr 0.3985 pgfw 10.66016 2.49069 moveto 10.66016 3.15096
10.1249 3.68622 9.46463 3.68622 curveto 8.80435 3.68622 8.26909 3.15096
8.26909 2.49069 curveto 8.26909 1.83041 8.80435 1.29515 9.46463 1.29515
curveto 10.1249 1.29515 10.66016 1.83041 10.66016 2.49069 curveto closepath
9.46463 2.49069 moveto pgfstr 1 setlinecap 4.00005 0.0 moveto 5.08101
0.0 6.00006 0.9 6.00006 2.00002 curveto 6.00006 3.10002 5.10005 4.00005
4.00005 4.00005 curveto 2.90001 4.00005 2.00002 3.10002 2.00002 2.00002
curveto 3.20003 2.60002 moveto 2.00002 1.60002 lineto 0.8 2.60002 lineto
16.0002 0.0 moveto 14.90016 0.0 14.00017 0.9 14.00017 2.00002 curveto
14.00017 3.10002 14.90016 4.00005 16.0002 4.00005 curveto 17.1002 4.00005
18.00021 3.10002 18.00021 2.00002 curveto 19.20023 2.60002 moveto 18.00021
1.60002 lineto 16.8002 2.60002 lineto pgfstr  grestore} bind def

 /pgf13{gsave exec 1.5 0.49998 moveto 3.50003 2.00002 lineto 1.5 3.50003
lineto pgffill  grestore} bind def

 /pgf14{gsave exec 1.5 0.49998 moveto 3.50003 2.00002 lineto 1.5 3.50003
lineto 3.50003 0.49998 moveto 5.50005 2.00002 lineto 3.50003 3.50003
lineto pgffill  grestore} bind def

 /pgf15{gsave exec 3.50003 0.49998 moveto 1.5 2.00002 lineto 3.50003
3.50003 lineto pgffill  grestore} bind def
 
@fedspecial end
%%BeginFont: NimbusSanL-Regu
%!PS-AdobeFont-1.0: NimbusSanL-Regu 1.05a
%%Title: NimbusSanL-Regu
%%CreationDate: Thu Mar 20 10:08:51 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-Regu
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-Regu known{/NimbusSanL-Regu findfont dup/UniqueID known{dup
/UniqueID get 5020902 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-Regu def
/FontBBox [-174 -285 1001 953 ]readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.05a) readonly def
/Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
/FullName (Nimbus Sans L Regular) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -151 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335D70DB2CC5A3208BB6D768E7
B58CD9BC2B6B7E110693C5A88D680B7290DB121996E3B7C8AE3C23147280F8BF
D8C60B415552700FF0E44C2257B467ADD5D550F61EC34A76143393E0B34D55C0
8B64B48E5F1FD16E16B967511AE15434B7F755BDF2574191E3C3DC528B69B5BA
7DDBBD3C7878FA69ADE75011A2C0F02F5707E86FA632D1269281D3C265B31F3B
F3145052467647AFE18B9D763FAEE4BA72CB9C385568EE5BBF5854C278F1E3CC
475C6234E83ED33345268BE52F0931B58F302EDA0D5751348E7B7E53D4882FB6
9343BDAAE87E48F6E82024D8EC1FACBBA36582092CCD76553B0449A5090774EA
7242123C53B80F2E927B98DF2B36C403D1FA1E9F8439F3964DC9F89A0CAB5AE2
C907309460F097AA87BD156575D6C73EDB2B40C015E67734397ED14395C43394
7A0201C6B0F652B035FD7BB82ED236D0F7C20048AFD83A56925C7A2898B46270
B440913E4714FD89697B3E59F5BDD5A2AACF6630257957ABE1A63502A3081B6E
307A534A9E238F986D4C866AFBAB7A0B1B5A6E99AA0A56DC1FD7E8A39CC45147
259AC7033A0C58192CA82FB12E09F309F75690043646193AD92D2368F345771F
01CFD21236BA52F74E36CF4B94259CDBA2EF1D61AD93A2B942A9896B0819D20C
59E440851CB99E89C887FC62FD9E7F88F54E5BC157D81A5FBC70699820C51BC6
27D7755B195C0BAD8225A6F3EAE0A5A674E8AF6B11BCC69DCF5FB89D8BE0E2E5
FE7E2588F93F583E4E2F6ED5457E90B902B02F51D54B9F0BA54291E687F4A7A2
08CA5FCE0C9F3B954247312EDA3C532D3DCDFDCB56FFE03B36DB7D549D4203C6
7DA8772A2F732A15DE675D3212C28DC755E3D0156A777BF514112ABBE4372ACB
97D7834813E1850F90CEE543B4C09BE1E93742EA98B8CACC09FCC4D2595EECD4
46C942EEA60211FA7DBC11CE869D55BF0C7EC6AA747EB2AE2CB3CC2DBEC936C9
540CE2E08291323B36F6549CDB97BBF9F0DA429CA9C863B629410885540DA6C4
9AAADB30C39051C993CB547BCD573D6448DC09BF7FF2D1B108ABEC2AAEE4060D
182ABDB3100AC627E5C883E8F42D90D699C8028D4123472F211C8FBB744D7E3D
C626ED03D8517D69E1ACD26BE4F83FAE31122294816736827D138E4F4CAB1681
236C1654E01231EA7F08AD0E73BBE1BE19A7AD6DA63AE0C7F5A360A53BB35268
CC90125C7545D9D59F5127F0AD964AA66DF020F639832FAF9C2CCA82C01120BA
6469960C350D3AF786666EC14158728E0BA2DD8A639C28E0A7EA8BBF608FD7DF
79C7B5DDEA05C8C3D6FC70177D1A9EA9AD056F0CE31AB535A22FF7EB33748071
6B28CA5465E87196191BE975E7C827B443B92E15342609FB93598571C63AE16F
CB7CCF15B8921F38FDB6F24403EBD6D6BB66AB49962AD578E93B235E6180B4FD
4920794B3F976477A04AD21728815D3185C74C8A1DF224DD3EE5110C18BF691A
987AEFB1DA55E4EF631C48E3B2431BF959A66D710C206B8AE5E988B7929BEFDB
CAA93FCD07341EAB622A755FF5608562153DD6A09E462ADBE677E6F550F93921
299E8A99B0B72E990A1D84831236FB6E9D0A187FD36BFA9D85C9CB0414FA7B15
EC02E8C08C8A4F71226A952C5164E68A44344BC4E6810FAD9BFD3532A9A515AC
5D6B5F8B5A1402C2C4DC011B043066ED02AF0030ED0D0769FFA19112C97076BF
F950438DC37B172FADA65DBF0C00EBA9A358B189F80CAB3A55341E4AB391F7C7
C03F47494A607BAF90BBFE31BE2A5E1FBDB07D5BCEE30EC3FE52FF996A595DB1
2AECFA9F05D26DCBE562B2A1AA7A2EB7727816C25E40F84CD33FAD87D505169A
B09895FB0309DD764439C39934618F046342D75079CA0CA06845F1360E4B169D
A93627B7C042CCC9CC6B085F23312C6D95E4C0C857CCF47F94EC543F43BBA04F
0F7F00F2F9D4AD0E3F3F3A4408EED34039982ED5E5664949215B7B7C699903F9
3ABB681EA8787E7960CFCAF502B7A3066310BE7A115CD32D3002B9BA6ACF58E8
A207CB55368FB37E1281E0C898AB1EBCE160ACB6D82AB81483F5A1915A280688
232103B3BC5F55E235A90201A826568CF2C21EE1C4940479654DAEF4707A8E93
78D24FC8949895D672D07851786C70C17BFAD48A183714F52E20367F6F8F7304
7089149BC0AB88D400A2C93FB6FF124E3C9005FCA6D0484D8AE12A8C5694CCA6
ED0618A821BAD346F80687183438235F1B8CDEB6125C334512C8E48377AB42E6
8BD7DAE19588B5AF719B63124CF31305A8A3D0194C3561159C7F530C8C90A3D4
FB1EE6E67404E5596E2951DF59F9FE4832E515BCC974BCC28E075A915E20EC1E
2ACD1E259F9D71EFD48ED4622078492BD363ECA1A035A504049080FFAD1B25BC
739D40EF3C2E073B6456067ABB08B04819DB9604F369B580F7C156CCDCD137B1
68F36A6280DF8ACD0A965CD25D0396326E7D8A295496B3D82C811C0CDAA454B0
F0E686234B6E8B6A41A704DD9EB85EF62046A1CD738398BC8278179C324582D2
3CC319B937EADDADB4C8C8C863869CB5ADF24E70FF84672097A2615E878E6138
33392CEDBAE27A07AA4A37F445583B3E2E79609CAC4A22E66B9ABE661AD57B2B
035C2B76CFBEA8F0A67DAAFD19AA4EFE36CF97BCF75E8F62FB9F8B01DC910170
1E5F03741B47BC6402E103D8D9F398369675964E7F3A04F637137F04DA2F589F
E6DCA4511480D2BD32CDF10E83A2D7056C8441F5CFE7940FFA97F2BAAE7B4861
4497A2E3D1C3EE3AB2EAFB40ECD8327077E999A9CB9E4418DB109D3925CC170A
598CC92F06404BBFBA33DE62E0EDDBCF4631318139CAE10E0508D1ABEE882F8B
8E7C5DA93173004F7DC15E14F88158179077DBABE6A2C74E5661CC6E840C3CBF
66BAC048A63D5869025AA6FE9E27DEC46D8930397AC719161E481C0EE5CBADE8
FE9C275E9793901B5B5FBD68DDD3DDBD6B8CA77A59E235CBF7BF9A356A9937BE
23B5B07978C27F5B7986E6F4B454D755E5AC004FE8A785A6822BCC4679CFE44B
935DCF2FD7C4E1E9599D5CCEE405930D2573216C52003EE0B7529CE188F1F53F
33527ED6D8379D895E5A46D5F1F741B86E38C77A89510B9D16629103A5040CE5
731113C32F85FF1065D359D7B31074AE5559A5189D42ABB4172821BA95E0E5D4
93D5817BC7A3A2171486FB761A3DCC7F2EA97E83B05DC785F920321319C62324
073F539E4AB31844277D77EB43412E55491C91A1697D1642E56467AD053D42FB
E3A8BD5D404AAE291A6385CF53CBD90F49C174FE2A15DC00158608088EF13B48
ECBBBF382B7100BCAB8EDD7C6B7E119CA399D5542949D02756679CED64C213C3
9607B3A21DC41E9A7B7D093054C9C870BE695E8BED9D9DCF561D0BDF8D869647
5D25840C73294F85AA844BDAEDC159F3BB5C9623AB910C5A76B77F9AD0909315
0BF5050A5F5719D0B6376B8FA4B1DE132F7645ECABC0BB544783F2C75655EA20
51E977EABDAC8628440EFD52D853C36A769C5437AAB4011DDD8358B81F5693F6
D6B8DFAD9E6C4A2A001DF7D61B8E9ACA75794F7550A8037E5B572CE55A557972
EC51157480C0E60D0A56FC3E44524B0C3DB9C56B53D2A398757163912D5153A3
CB1DA75F725233B8026C4F8C9FB560040DBE0AB34C35AF94DA135F64C431F62E
84A5049B7EE74D0A1EA11CDD61D23DC7CF2223D173FF86B93142FF7E88D8AF3E
5E3E106543FE9BEF145B7C3E188EC0D3861A45BA05294C446E9FDCA5C020101E
60B505D3BD4DCD7370743AEFCF175EB6B3D62C59D2B89585C0599887F19D3DAF
9A31007E722B06434B28529405AA19BC2D1EA84D9C9FD6553976535740F9B806
0FE789C37035CECD0F82497C6F0BBB6FE10067AEDACC945683C8C7D3D9428473
8A6D58FD9EE2D46F629A20EADD1CEAF009551E4BB9CA22627A490C838443B6B6
66DC16E47899EBFC8D6AD907228126FEC350B21939B2BBC6D27658A8EC6598F2
00DD498BFFB96EF37EF459D588BE88AEF1D4A89042E976E71029DA59CEBA4E48
D7994BC6AE2724CCC87901E3AD51EEE0994AD359C498930EC02C1BF75405D49D
0CE038816E966AC6E918B0F50CBFDAE9F7349C8A30447AFB9D939CA97C27A08D
9865D24C93AC22CCA8FEE03E7C25984383414BFAAFA7C5902C318876B287CB6E
A57F1800F1C573DDCEDE6615E75A952DE5BA9DD86B38C0472F2C0C2B905BC861
EA69B16870C985C22B01DE4E2C2FDB17C6E3A5010AD28B76852749B915BDAD4A
496D27206F34A0E74ECF632A91C9436B25C744A61AC9517604E54B616673E052
57E9ADC96E868C882310CE70ECF87D1872C0DA7B197408158FEC7E1B04ACF4D3
B6F60BB28EF4D8666FCFB6F286F3BAE1285A920F22A51FC7B10777F37511CF2D
50876533EDB5E1A83718CEAA9CEF35308B6096D5728C2C4E3226B8FB232DF250
D6D300B63EF3E974BA3C927A80211C93EBB9CFC8DB611368A4207B0C1EC1804D
D14995BE637A633320168F5E3B0B75434CA44F482613B12EE9AE14B523C7E630
82D59F73285F54FB8E0FD6035BFEEAE9810444EFF5F3EF9F54E79023A409D2AE
C171CCBE5990C69FB021A339421F1CA58734CAE127ADE9B78252DD54C4421CD9
19A1F9B954381A2CF5E36A1CCAC00A85A3C3BF91C785C4E9C5C9005D4DC62AD5
7B8556AC4D3E87D946614063F1661198A2012A918AD9D921C8F02C605ADAB7AD
FC5A1DD3FCA578C1C0F834D4CD0815214E85990C05771B39D2AF396B6D1D4DB6
7257EFC4424A50631994BBEA2F0A2998495FA1D3AF44A2E1261CA62243DF2E62
1037EFF73FC116A84FC13041B76CBA397E64C3498290E80AFC59F1589C8FADC7
486A112BB857A55004859BDA2AD3E023B311988CA2A020D777F19F9CB24E82FA
8D02ADA006C661825A16C4556057B7A2B9F9C49FAD3D167C1ACECA9EB7E5D972
6456A1779AAB7DF3F14E3A5BAF64C239E700786CF2D1DA1C21110C034ACEF163
400E743A2D984C7AE94CFFB7CF9008213A6349734ED0A854D610148BE3E10FC2
E529F94F922029C91C36EEAE96E74A8B41470FDA4BD045FB93C6453ECC93C97C
DD8E7FB9B69548A166939FFF729251544859031FC8939C33B5D38CB05DCDE03C
3B07BBDCBD00116009DA33B68BC7317DB17324A9CECDF6A6A0ED93DC001B740C
698F87EB5A81F11C9DA1FCDA689C4DB1CF8A6BDF886F6880B041F8906958DCE9
A4FF13F558231DFB47CD98B53B65ADEEE14B21F77031A473190ACD43CE40C2DA
35CA10399BE6CB9C47EA834421A37DCF7A2CAACF89BE6E228A77256FCCB37BC0
92DCFFD65D197AB015A6CAA9E8145566FA3D00CFBE238D3666D5DDD4EA913D2B
65DF772F7D5CB0A0ADF4D78F317C22D39D798FD92757BCFB73B7A4B41C7C942A
061FD19B1488708C29BF6EB2C9C9D0FA2FA6F139843A71807F0686756F889145
DA5658A57577ACAF6A6738A92E745C6693CF3B498F8FD157B69A17725E7A2C85
FE8BAFFC2056C9493B18A660A47366C06A1CCA91E5BB1F6FC010B06FD6093A8A
56414FCEA36692325804821458562A829431E9C985CEBEA4317CC7A4242CDC17
334082BA549229374E427AD26D257C3E273E8F8F8A220E3181538364BE1709BC
D9898C35D0E9E028ED3CBBD98035C76A39751B9233BE1D9B34467D3CF72A62FF
D41D7DD1698D08F29CFF42A6FCED76FA82211E5C0086D902CDCE256AACDD2470
CB9E7703BE6688BC0D0B016DE50B05FE7DB50D2CE16C52BED89F64BD80D2BA6F
05F4FB2E3C239C8B169318B94268F37FDE0B730CEBEBFE4416C67F8F15D70ED4
04B0FA3F024A251A47E9098766ED11CBEB1DB8E70A8B320A0A1A04127B11784F
7267123C1BA0F03CC1EC60F7D65E404E7C74F734C823A9DE574883B1D9515404
43F6FFDFEEF582A316BAC917092ADE6EB0514286ADAF04E3C31655737EEC2B3C
3FC8E668A0991C2B5CD67955A25C0BEB338046CAAB4555120EF11586210C32D0
4A6993318C35A02C3317E346DDF8E2A558DCE96114289E449D02D251C583E0B9
26622C3DD5700C54DCD8AACF8ACC26BECD79ECB8C35AAB6DF1A0CD9B6D02DC5E
505833B02777D21E686E6F298C82C859A90ED7611C9B6FAB2B725520CE5E2155
D57AC15A449B344A907D399D679AFE3503736757DA7B0131291ACB963545A8C5
2AE45536A3C49426AEB3398BC45F01264BFDCEB616F0993C7EE5C988DCAF6E28
32D438FAC370E44D46006AD811B8531F4DF6040209584FC69CEFBD9A60A0F690
CD300179FB3D0717E976815288FE62F1169432C7E6A21DF90A323992D0939FFE
CDAB517E1969074B456243893BE11F3B93CB1DE8F284D0C0BB7507EAA8401491
36B5C4896054CF14BE768361BBEE55C958E8AB7DBA3E97BD3CFAAB3E140101EA
C38B1173A1BE8B74FF5B9D2E10D4CC90F0257B48DAAE99A0131428942D30267C
FFB2DA47B2DCBD4EDE3803F37E017C3A598E9B4B8649BF932E31E24416104404
DCC38924169964C60FCB2CEB61E5F039D06EDB2FB5B1D7B5C271241A8AFAA3A9
8F686B988151F4E6D12CD57ED908F30F137DFEBF96C3A3929BE71FA8178B4944
5B5ACD1BD94186C422532E72FC6C7EED4D162636C2E50E96FB39878D41D8E920
C6708FF5FD8D6F6CB4549E8F5C16E64F09AE195EAC2B2DC6C80B5EDC9E1C4F19
72C758473401DFAF82B0A3717DAE4E34B6A07F784BE3C7F66BE2AD308C910E5D
25623814B8C556DF0CBF30C91AC67EAA1EFB534D4838632E4D8F6774AA9ADB5A
24C013B8C176BE136F55FAB4C8695DB8B574E1FDFB5A606F346854EB945FA6B7
8ED6CDDE07DE1CDCCDC4BB6929C135DD6A3E81F92D0360130D0BDCCA23226FC6
E5F7B3D811CD9BA2EB46BE43E6B5466FE45C85EB97D95E81A30C10AB918A5870
42CE747E18233B5B77F9D791090D124F6B20242E66CE491C16337256BF4FA445
575F74D3B0FED765F97025F32D5026F6584706358B4FF4056269AF9EE3D893F9
075DB877A5DED85EFA58EA9F42EF69E3BF80CE8DF9B8DF3285A932E1E11432A4
A4A594A3F273A10262C7B4C908BD1D918EFB337C9183E8BA443CF79153487AEC
DFDB106564F20B5DF56360796F185EAFE09EFC7D31C5EF275A7B49A7AEB44471
15B36480EBD57E3644F77B2CD77D4813E693AAFAECCF8354DE02190826748483
7B03B55D11DD097E477C64C907E67B167E352A368E1435C9790A30D64A38669E
20E2121B447F706B2344DB3161E13B3E551B69D4B7E6DA7EC0632AAB3F126789
803E009469527E40C1B6B233C6DA2A531C9A255C478F644FF49784CB3A0523E0
30931CF94FB567976B9EECE535F57C5CF57A67AA37C916B9760077AC80093607
61184FA3455999471761E9B8BCD50D23CC587936D660F3987822662FFF9CD443
2BCBE2F5EB62BE224DC1C631C957B3038541771F5C80039A7DE2A777AB266317
CAFA7D9C85CB7E3D1096230B12C5BAEC44311228FF17B2589DC90DBC29D2AE00
A8D5712739EBA50B61DED3B2790E85F61EADDCCA7AD5C99775FFF7188DB7A42B
2C1A09860D56EA01EE5C3DEF94B93A27216722B2733B03A818B8AC6D0053523A
BC63EB86E923EB178AFFDF13D6ED94C2DB67ACC19F5DA1E3C3E9AB20CD14B127
CD0BDEA22B0288B8B98738393CC7E7C6BA11AB4C73C834F0AFC1CED4E94EF612
76C2D7AFDC46491AFCB3C25419DAB13404F75789A27970F8B13E30147951ACD5
A135A21B001BB926F2697E40D1980E6232B8944C622A23767D394FBB1A9E631D
16F4BC41536754899F6939AC94672F6171DDACFE512644B23EFB5C2DF1801CF3
BF4D6277EAE45031FC2B12767DCA98018482E7CF158460246E2E2DBAAF95A2A5
116AA87C10099821C42981810C91B10783BC4272E7B4CD134C3C6C7EB6D7A996
3824BFAB9FA00869438CE5AF6ADB559A6DE5202ED943BB90DE478A10368BA8FB
29AB75C634CBD57A2A7BA676726F2BC8A0018ECA365A9A139D8C3B20E9F84128
7113B898FD55EC0DA2FFF8AAA2A34A2EFC984E5DCEAE079E22AEB6E3864BE993
FE0CAFF7626C47EE03D43C5B6D3A4765068EEF93D9447E912154B3AEC1615CD8
B62B8AE34BD588DF85F03439A95013524E59EB0F26FC5E09EBDDA9EF7D2310C4
8E810CFE2AD87EA1327BA00D472C3AB7E876ADFFED686C4FC1EC361B45312D9F
6F1D7403E55CB7909C5DD3889284E7843A6C10DDA4D011A6DFECBD593EB0F8F2
422F1636802F3703C1D7E8EC44A808847C1B2D471A2EE37D7256B874DE673A47
F39E0D26453128F1EF85771364CB02292A34CDF5BF32FB7B5C751E2A52FACF0B
8655B90AAA4F61C594F2B38451EFB666382039FDA7D0D1D17725CD3331C6DE4F
F912061D45DD13AB0FC5A1FAFA545955BD3FAD2712B87EFF152D2F2C2185F6E1
3188584DBD870EA22794143E869C664A93D9DFC6DCECEF5F88A9EE79B182AC77
FC7270A93986724E3D39C0836A7CE96CFFF37462F203757BFACE92696321F9D6
11DF922BD6451D261E49F3BEABF11618A63A02B5065DA73EDF607EBB08452982
461D3B6A48E7C168A0C99D6470FA38B17319647570D761BF8D2999E9CC4F18C7
E370CADBADB669B43AEE44BA661133B758A08803B9B07DDC18C01E9A1CB70D53
6A8DC2E9F6E535E60F9B271A0C9B390519130D6EF2B2630B793EFD806B81E36A
556B5F358140E35EE21A0933E8E6AF19BF271E4F17E27157EC4907CA5099EE26
48C72AE6C0214D855C0BAEDE6F509C420029DA8504A9B1B2649B2ED71E5142DB
1291C5904F27D95BA8E1722F9939729AF61B2110021197A4645BC012C27B8E8A
5FCD27CFC0E9716DEE5C3A004CDE141874B764DFE626BF36A894F1EB0E33D662
A357F388686C7E0582E807F1D25D0F9E1CAB5A0489EF192B011ACEC47620D20E
3F5683A9F6624B03670151268924738E38660397E5F289DB2B4B3185E04A4555
CF27C9143B7BE292EFD19ABDC6604D064D60AEA8204A17CD1AB0AB6E38DDA161
E3C142D9F9B1F2AA65B0B81FC1A6FC03A9E7534691FBC632063C5381216982E4
3079F007A6C17451105AC9C6FCD3ACB277D55F8F09C627426E5EDEBAFFA3F96D
0872134DC93DD6C528FA003383DC896730C45999DEBCD512A021E2BEBFE5E5A4
33B29652E7D94DF2698F7A9FC2279015F70C0F360F6E47A9790853C5201AC309
609C74E6D746FA5A0ECA5A60298B866398D9D4845525167D1112CB9BF318B053
8485E4EB4A7F8BC76900B0DCFCA2402EC1CB2063A848D3B72EE0F4567CBBDE6B
4EF92E2353E07F34AA952580AA12BCF1F6E4647B576AF2441F6E11EB9F1DEF00
82B906CC0BBFD4B960A33AF1A49B849479104759D993728944C199CC525EB7C0
933E4B579D0BBDAE7AC4E95560484FC019FF817B29D47ED18CF4BB0D08FCCDE2
7264E694671BB662F261143D306523688EF3D78B51115AF8F2E0D45FD7E5820B
45A32EBEAEFB69BF45863F460A20430118DB93AFB1326A3F066158B6A657630D
53941772B5892ED093850BE51BD261CB6B3D8E9A18216D0B55E7CD0D8B3CC6BB
D293ABBC7FF1F41E5D93060FA8BB0456EE9A10121EBE3D2999ACE1735D15E656
24F5FCEDD16B35458C4A46E4637E1F4F8A1FC0741E75E3733BA40BCFB48A1C82
C5C248C95C3B47A0CC32B5C24970E0674015058C96F69F40BFA026A584B6A387
5F9E528ACF09D8CDED220DC0BAAE64F0EFDB5A40651B02980E612132600531F7
4A21E0B362B2D8A1778A396A56C87CF9AB3674EB777744EE89199F533A808533
E736FFCAF230A8C8063F40628077E0045A5A24903D60DC13CBE51E33639499C1
2EBFAD67422F507DCE6E6BC7B3232A2334A460924AA061BBD3320D73E55DDD0D
0EA208C771BCF0CBBA2D2D2BECC341B8FD41F9D8FC8526DD24B5B8774A326DE1
0CE5B416D714AC81ED16B267DA4660E8ADEE7553AB99914267F4BAD00D003577
BAAC9DCB4BC354146A34C92F7BD0FFC506E41C4AB357D33F6580352478CF5FA6
91EF988A74F63C82FADFCAC9800E06466D0B4F63A8B0A8BE368C76EF2475E50E
913D038DAE189AFFECA317BB6C0A64FA590BFD33175EF65DE95058D879F1AA37
E7BC5DB9F80196CA1E67B766A9BEA9E4AB844EA1A4C09513776675FE2A0A08AB
7EC0D4F4EDA825F02FF15151FADF1809DE4CCB378E9332B65F7EC36D07689F2C
8501932FEE2E89FE4FC3058645A16BD3B9FF9F70666BD4ED9F48D60D06095426
7FD0DB741A8E0D6207F43BF580853C6A69106A645F265E31FDC8FFC80F947506
19ACC65A91CD23BE4AB313E94245C226F79CA7DE9B5ED64D1D22E47FE20EFB06
7C29C4CD8A55F8830B913DEDF9DF04D4D8EE640222C3A5540C13F24549492F1B
9D11812113D9DEED41C3A15E38839923036A434E6DE7E12509CD6D2F78BB57B9
4CF6BF1261B013A1B6AAB704892E3183CA80FCE1AE0ABEB75D58F5BD2D86BB62
76F72348BF9B0DA3CD5236C480E3B6E6BB2A060B6FC00135CB06E64272D6976A
BD48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: SFTT1095
%!FontType1-1.0: SFTT1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ectt1095, tctt1095, latt1095, lbtt1095, lctt1095, rxtt1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Typewriter) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch true def
/Weight (Medium) def
end readonly def
/FontName /SFTT1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-204 -361 1351 830}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA1B1ED6A435B5950D131BC48179F5BE3191944DD
8626DE76AAFD8EC4DC8241F2ED33E10698DC7741D6E45CF5A02FC6D2068AA205
EF3C4FDCDE803F4D1D4FF03A079CD4FC4BAB3C558A8FDDF53D34AABB7D89E4E0
CF76F77ECE57575C27718A8074CE275DDE4AD245220A8236400BE47BC76DE13A
9EDA4BD5744C71DB407BCA39DBC9D857122A1DA969E6D0915FDC1622AB8BB88A
93D2EE72E9A2FA73193D6CDF254252980674DB644EEB36A2036E04DB649F816E
E70C4C43E88609C8E8B8B84A920CA933FA00F41F2FC3C867825E2AC658FA0F7F
331323E22BD193A0A8030661C8431E3B2523298255BC9D1025ABD883154B590D
B97D5A1A90DCA9ED3940FC84C07E268269B69A7F878481471DC14E8E4BE55F46
AFC2CEC9A1EA6857F536F1914475C3D275EC8AEC2F4C83748B5C4A324D622969
FBAABBAA077F0E65CE50F2915D58797FCE55495C649123348787AF4AF9289601
D5695C7D0E49D54403BC216B0A916DB7C1F42955F1C0F02CEAFB2051AB338305
AD4A0A5D3591FA34D9C96A192826E4E6901C067E53965E2F6687AF76F8DDAD18
C70E0E85901AC23C7A16279A0140DA9B0DDB34945D99FED1D69A56230EA01481
C1E08528A0AEEEB8F932B3C2FADE2D30946C3B59101F85F1BF33DC4495F9F993
EE1F578EC06B03255D3134FE7829A0E9667775BCC1B2CC03965EBC12A04D93A9
8798CE559144449319347C77274565241CD691C800316E4D749D55611333DBA8
FDAB02296769201F774055CF778C9F9BA10DED0480657236FA7479B4B280BAA0
3CB02E3ADDDFDAC61D6E2CB38EEA3FCC785B1E00A91B3EC814CA49A3065A7962
9D390EF7866D0B735F2B98D2745187C04AB7DB52E312F96A32A8F9350EB34E79
BE368D73D4F47150D3375E4BDA5453F244CAF9FE9DE77B27D19B1A06180CE092
968F8C36B7BE5236373EFB505346F0D5E3DD1E6912A8E62A9B0A1D331A6DF16E
8541BA389F2A84B753BE0B267E46F92001D61E922ADCF3F6C0930357C13FB323
5F5136A90140A9F92815DEC47CF5DEBCE73DDEEA523D0D446EBC550B5FD71A55
FCA4CD8306FA46FEF459314B406AD33743D1EE8C53B96F6DB935E2D897130FB3
F60215F633B89BD1BE2A35E480FAAAF8C23C49393F166F8CA876786A5E434C7A
DE88CCF48B975B89DB0BFDDAD14287110FC81F540128B586E64A29157D801606
872F7299B350C1A912D379D9E37C8646D080E87EE7DB74D10C6A9AD3D9F4743B
B2EFD21B8442BCD5D036274C091856CB963E6A4183E49FBA4E0450B7BF4D267B
014C87969CC25EA7A63059751F13D3676C5EC3581F6F3BBD0B7AB93FA00F62F7
A578C63A9C22ADB730BA6E0ADF2779061012A08E1C77A3915224DEB5B9DE9AC0
FC29C5CA3487B25F4361A920A3F5CF1FFB7667425CDBA450B23DA3D8E8DCBFD8
A0EF72201F04FF1F7D94F130E5394BBBFE6B2B02757651A35C8A7F5ADC394324
393A26C789F90A650344E60D96FE85284B33D709A330CEA0DAF7C5B204EEB928
2568A2CB7DE0FA7519FD2D2A2C3BF7A0711BA3D87CC981A251DC2722026264EA
6B1BA02F47B81FFBE6CFF6F1552E9B16777E93BBD036C11D0E8A693880BDC6E0
0A00930A716839F216737653285A0120393F3379807E5E79F0B04F4F790CC22C
491F3EFA39A8EE6EFAAC3B1D4A86E70CD8A65ACE0CC5BBFD3A2CD8541C74E528
690CE389F222A4546A59AC93F2613983FA3449D5C344A9FFD7CC914728F9D30C
715063B394962FD472FB7C32A6E3E3EEAF36DF2445483470F28AF65F29CB0861
89B55C4150E9EF83FA45C008DBEDD2808DB3D85EF67C6BE23B4232D6EF975CAA
1FF306600CD9DE080A3564829DC26D00BBE34C6B12A850C0B88086C8B2BDB0B3
CE84FB2E5D4AC255A4A6CA3A94517F78471B3BCB4B809397E0AFB7F8F252EC70
527E2396FC2D60D1EEAA96D19430E3FFF70A130D89D583BC1FA56D6F762E81FB
AD47C67E1F689752FAA68EEF717FB397BEC594AEA7CBD01066EA71A2F40078DB
AB91681803F1F622D4CADA3C733C2AADCCB48A9A2B0BFB7047C4E02B729D3A3B
7C2BDE79661A3A49E21EA63D1089F167B793D45EF4F760E312A1C78972B31491
F9BC5E416D7C5A3292CB2FFEA4F79A8E5FDF1E91CED9A9CF7BCA386974F0F051
5713AB7973FEFC3C360BC549BBEE2C50DB4467D4452C5D4796283CDA43CE0B6A
1BF3A85D70AC13C9247F52107E189B0658300ABFB348EFEC13DC6CD829EC27C0
DE70B95D0A11538274C0D8C990211592D6E921C6CF1CF7D3A9713A524118FE0F
CAEFEA32B3C59F5369CE5AD2F715BAD21C50B10585F95A552C4318EF0BFB01B0
A777A29086347F56E1901533695655EE42B06D7B6A874E53A0AA80B7CC9EF509
6B4501063443EF9D7B2909DB0590413C9DDE2C9EC48872C8701C26CC99455232
455F7F7165A9DA8DAB162983FFC3D0003ED1EE7BB5A3E5DF84C61126290BAD08
85D35B39543D32BC9D0CD5AEB82FBA9FE3329CD4DD60FA9FCAE24E521A61D6A0
2733CA457C9785FAF7C4ABCEE477BE97BB77672F3A6D07229DED2545BA7BA59C
0208D59A1866FEEA2D5BF2E30D6791EC4E84E82A3BF2BF517A3575756B7D4F16
4FF2CF6DFF639284D4A9C81FBF3D4D3ED207411985C5EFC5F570902D979BF4D8
469B569E210CBFDD7F2886EAF0E9EA338B2E8FE21B8C07FE486F93E2E2658386
96F1C2A5F7AB87D5D8BE93D32FC011EB0C2F94B1D2CE99909C468AC98EE0E727
0BA8F99A407F0F540B9B8BF96725C287440DEC77F70B3DF219A0415894E427C5
F582F005113F17918DCD399C09D0247C1E82D3CB27A085BA2FCD1B26C54D2E45
D20E2154197F24C1A63D06208281FEEDE82F0AB4862E3F711FCD6D60BE476655
49555C53B2F30BE245C026323F15A881F6AA0CF7F9A87B9193D2DD4FA34A791B
132DEF828413009BD7E36DAD065A6869DD71D37AF2CC54EF9A7846FA66409A0F
2B82FC209ABCBD3FF373EFCB1335D1033E400DD3773FAE3548BCF8A2D3553FDA
280740AEB14C001D7575DE9D7B6D9337BA75E6159C39F129D7775E7539EB9FD1
41C754EA8685828FF79044900A813194DD1E59DA20A8EFE5DF1E3705A7E9F84C
3D09A3FD47B8B3105A88DF3D8AC3B654D95E6C33BCF60A4545E7A804614DA48B
1D8E40D824DD8B76A5157BAD9CD62CC1C9CFA698F3D5BD5FA826ACE6A0B57729
907F05C2BB8F451FE65A47D57429E639107ED3222AC9DB5ECCD01FF04A26B0FC
8B92B37E736BBFA3E8112B67C5D2851250FA4EE3199E1639DDEDF5009220388B
F58F9858E539ED637A3A637CB95929346F1544D5B30ACC69E0FD328E021294FB
F13EC605009F4AFCBFF79F815DE1EFBE83127B7E5EA8667CFEECD0232F9124DB
BF37CA21ACBB09C5B46D7C44A5E57B58CD567F3BA72C099311B0587A9AA97686
E8C27F8FF28014C2AB4C14832705F37B72557A6FB3D597054F3694C0C2BBF7E2
977A8372FF751A996620B52F46EC9E3A8A391F570610CDF3AD13A065BB301FE4
87671763A89B4E985905AF978F9BCC9C6302749F1930671A59F59BD9A88D0478
691AB71135ECD7851035C96982439AC53890FF32D0283C2B9B13978235669DA8
20C226971D791DF18D435619DAC35D37EA3AD44A06AC1350C49F3CBA0123B76C
D058E302DCF5783FD9D4AC55BFB537DA9520CD9F75C3A5113DD05E3CD8A2CB88
66F2CF2BCCDD68DEAF24CE13EC867121189DF64D8452ADEB43EE32F4B213F4A4
E1F6F56B89D8CA8A2CF464AD68D7D6AF6A8E340B62C2301E3DE6320E4F7F571E
A1D80C452A92A98C82803EC7673E3823CF91A9275A37AB76C16F8514194C60DA
F7111078FA69F8FE13B776CA3C006A2F6EF8428E27DB4E06BB8B1E0BCD9C642E
2FDFB5303979CE2BDFB7AC371B414B9EB6A79B6196E350498D5E35233D884447
28ED3E1239D377C60853F792636FFC2B2A584B55CF0A88149C84C6ECFD64ED14
800A6686BEAA8E5D449CB25D7508AA3A57E36EA5D4835F196A930F7E527BE2E7
388E86A129F62D7F314F142A4E6066440EDC5D2751F4D09008CA1A48B97A3F61
0730F13DBF84C04F6E23863528DB72EF20A0EE9990ED0F520EB2AC073E63DD9C
9357F6189E1F49D80C6C5352B542990B71559FA7D5687182CF50E6206C182F35
ECB4195617F277E52D0399EB6F2622FD2F44F7281F9AAC3F458A51932D7AA774
B2812D60930F6063A671470123910272BC1213B00A770E6FC1A150BB7ACE00FB
FC10C32CA84630212AA377DC6DD1529E6E0C5CFD1917BB18A5F1E6738B3B4879
DAD8D22F960F9C8C5FF88F635624B631DD11B651016B20B867FD25F403D9C3B4
6E57D19F344791CBFB5F5D006B7ECD10D8390E91A587DC9F82B6BE0B2F062B76
23511B0FB2684D80E48C37FCCCE224535C290F183BF30D80036436F7BAF29018
8074DC6D874CB2247B8358B43FB42337C5B4AC7858B02D1AC329A2A3A485C782
2E32BB66850360DE0E36875DE2C3E4B7FF39A709F9BDE28AABA73A8866950C44
AE29736EAAF0E6BFFE18EE918E814A200FFD140917B85C9C1BF8F6DEFC58CDBC
73175C28811F1A344F8510A193DF375342B8752BB89EAB68B78EFE1B85919158
6C14A74783C25CC235E946996586C79196F03715FC56E9BE185FAC2191F60BBA
27857D7C031F9E88C23E94AAAB643C623AA10C126651F8DFCF73343B46E25D5E
C834760D146CB0A5B4A8AA5945290FBEAD55C2431C863434670C717188439840
827375492BE3CC821786A49FBDED3ACBAF58A521634A31E620C8987AF5C5C549
6CA8A54DD70A8C5EAF9A660127AA660A3C916FBF2ADC80343007E06C496243DC
7B035F67269013F651AA2E5F8CAEC9D1991EAA31DCF5C1559B318EA43B7CC317
DB43FA4723CD86357D9C6078F8AEC542E98192DEAF2964D82D9AE27DC388167A
FBB4B1BDC78161B500C70936E66FFEF3277C1DAE22D0AB804EEA28A64C76A90B
6EE405BD3B69400922DE98BA4DADEF06FCD73E9755D20E58332F7BC37DDF6DC0
006BF19D8EF0CC13A462D9BA1E7944C563676A6EC0C35157A04AD35C0F7A8403
B2CB2AB40AE9F9B357752624E673236F2FBBF0F795DE914558AB776FEF67C8DD
182AC5EFA2D38CC6490324BF66716F18A21411C420772BCDC438FD2962F9DAD1
9BBAE2C2034613631837410E4E7C8BA28BD1898015D6B1E5C5F2A4948ABB0765
45F1B5872A2546E49244D454886F67F84B82750FD9BB63DFFED6DF36E7380620
F0AB123666FC6E165BC89B872518015B9B1B9518CB67A26D8FDA9C879CE81135
532F47CE13A98F648FF65FA074AD2500BD0376356627D50218E2E0F0150E8F51
77E12FF9AFF63B86C31681A1A74D2BB8468C530A56C55345288E2B3F57C07F43
AEFFCFBE7A8FCCB58CADC24B14EE5388592BD478B2CDA4937ACD58E4B5A0C1AC
E945F990585122C9072FE2784DA04324F101692187D66B2A457C44C8C51E9F8D
01DF09A6589D9CEE75E6D56B5DE55A83EBE394D05A5D8DDFB314C08498D70803
4FA5D50D15A83A0B408603CAB6FC35486A7ACDE38C130AC470C8F9697B50449F
B4023C1C58E70FF0B3F560C53919107588135BB9525550DD7729C3CD32B811E0
458A5AFE184EBA57748E1243084ECD3F0BD7965CE1854E36A83CB092607B30F8
A1C9B27B3F741A4E6B43846E2930CFC34EF70438E9CE226B563739BED19F8598
AD4F76DFBFE91547187BBAF1714CC4CF05A5F07EE4DC18253371030BEE736F20
ADD4AC1C16311F821F92375622B3967CDD77B448449209D7C8440DE3D0ABEB1B
1D4E3452D1C3038E522C25DE993BD984F2BF4FBFF48423319805041FF814B0BD
D64102B58A59D7A62E5EF35CB6CE6C61524A65B275F0F1D250DDAF07D975D2BF
9FEE69E7E58511EC1E2A0F6557B14A8A977E2CE8FEC755CEFDACC6BD540058AD
F464DA89A9EFB5AAD525FE8024CED6B1932195F2E3F904C66A83D9A5AB61F23D
28D778A262844FB112A5C09FE173C0583BE338DDC0AB494E742E4C249F029FE1
6DF6CE313CC90392FA6B3ECFF6A9570EE1ECB55240D7E65E7CA169DBCF00E9AD
7B0795C3CD654950795D08A0D7C797A6FE0A07D194EFFC36BE6A31CE9B44248F
BEF392A37A9CE843546003A2E67AB3AC7EB56BE279E5346EA6DD0F7A0591F8D7
85AA51B692CEF72FD810AA2EB948C4E076417268C53461757D3BA08D495F874C
2CC4D846DAE64D9692C62B1E6ED78210EFA4D2FDB90E10C8AF0F0963BDD1BCA2
4B9CCAF92DE8ED88E9971CA4AD111D866EF25BE7AA909FFDD31DB0EF099ADC20
98B971664CFDBD3F1808F704CCDE70263E5C6F0FF8510BAFA7FF189A7DD7E1C1
8889212E0CE535F58F5AE00F69D904DE45C18B7DA97314B5BC3C7954B5C60AFF
355020C2B93013460498FD8FC803E7AA9BC4B945B96215C0C94D1D0D2D65F7AA
103EA01AE53063185C7352159E3814C8F182EDF9772C2D38E1CE50083A506F57
0143710F4E001FFA908C9158FB4DB6DA9143D4422BD7C0CCF494D01487E6A39F
C0971734B8DB3F49821D077FD359E8DE829B0317676F0B45E4956819AD2470E3
53A98E5F4261692BB0AEBEE06F0A0A36E584A86BF1BD10D1CB3445CB876D4A60
26D01CC8DAE6E410E5ACC5569899B200D5E928A06AF83059A3665D63E1C13E92
EE9A7F78CA2CE534576ECCDA5BB42B58BE44EA60065DBEB6CC5282B284C8CE8D
63485C2587937E57AC32605F71C14D6F1E4B622AFFE3B187395EF316196A3E96
DDE1B88BC2A0282E4037CCE936BB4124FAC5FB4A3E82A689AAB175F1D53FFE1D
2B108609B0604B27C67293E78A4B3D180611C45EFF27203F0679487090D88DF4
0E76F93DC5B52822BBDD2F566A063E625CE297B6D928011BE2A90CCE55F5FF48
98D970694D3AC6C1F14261F31CFD8519CFF9545872E9026070F045637BF6F46D
C6CD4FEA8E1E9120F727074766D6F0630B98239CC4C94F39F8B6410C985B96C1
BB8E39E92B6F7C3B7D1D4AB206E3823CFF7708F7D78C26C1D0FAB2C221B31151
B7E6444C2D71EEF218C708CC8851454064500604048EAC8F6969F90D5C667224
C5C327AA555F0BB0E0DF3AA5174248564ADE8ED69C4FFC47D01F2D9B8D5E0AF8
D276745C88DA2EC25B75C01085E9F813B24B0BD4ED7C9E63DAA701DAC4FE7D7D
758129BE2CE5BB23092A27A5AE85B3B065860138032946EDD761F5EFEF43C493
393C0F01EF97F1962F26C00DAE9CE1E7A23776019072F39719469ED006A68D1B
C452B38DEBE3C83379408533479974517228E3E7FA4D4829C02666A5665B7B09
7C8EDD95A6AE4D2C418743408D849A730AC9317680A2EB2048741D736510B671
084530BB6D83DE7FBC00B6E90AC2795D83332539DECEFDA0B44AE61DC1AD69BC
D0D182DA5BBD35B378639BF164C1CE010E8C707D2B98701285BFC55D071E74C1
60B266057F4EBBBF2A1D84966DD1B30F4F449AEAEDCE5393D501AA2A5B1E7A00
ED409479B28B94CD7FAB420995A5F70A771BF48B73DFA78CAEB62BF9F89EDEEF
AFF056B7822D444F618FDA511BCF65A4E51527B9070A0181DB95FDFE11D18010
5BB723D90D64677C10A641DBADAA9B42AD880B5343DC8CA18AC04F39534E88BB
52B82D7E1FA1C296F17801FE5D93569516DA8DEFA38FAAFB8B546F7C26AF2349
6D8882592C2083BD34DD045452925D32AE6CD2829495A11171D67C102BBC2A34
6F2650B1FAC2CD9BA1C54D3B05D60B0EB6EA44A0C27A85BBD20D7D0C2FAA782F
BCFF0ABF10AADB64E76931D1321C86D5019CC2806011CFFE9F88AF3302CAECCC
09D411CCFFBA9018C10F961A050F8B3753478873D8DB835C0C0896B4FC6A2A0B
F82FA89594BD032675C7663A426DBE2D7C263F5421E27EB3689830029B239457
CAA08CC9F7E971ECBCFF662088122283EB8FE6B8B85F316CB98B5BC6C000DC8B
39274A0528CB5C36ABB53DFCEFAA29DC816BF4ECC6A35ECD1D466873932308A1
D504447E37FB588CB75B779B5361C9DE43CDF8273D87438175047798B4240896
57FC75E4D5354D1982D6E3F2C80C3C6C6EE5F25711BC4F4DDBC96AF82B275307
AF550F3C8EF13B98968032E4C9DEC8C0BED602BF78B6912DAF18C40FCCBA3D5E
4D403B9C00A983BC0DFEE43B4B5BCECA6B9BF6A2587F0A3DC5C594D3049706CB
5FF8EC37092ED0A93D268691B6DDEAAABAC236426540D5A2602E62F4AE7C3A5B
6B077259B873854002F8907ADAC5B16D7589D623BC039DA83B1BBFD11ED2A433
F2C9CF5E7C464AF992111236F6957E848696717178E8D6455EBF5FF936459B15
DE3E8E77E0CF73CEF75DDF931CBD6E06B8790959990DB0106744B80FB1086D98
C3CC5C79A68605066B1F8B78EB25A9F51240F8EFE39C7BCC7B3AA99B6390DD9A
A7900538423930737AC10191DA7068F475601FC7D5656150F1FE7109CCF3E7AE
75FBCB6225793DF61AB8F22FD1CFB4E40FF4068BEB016A0B7167D564D4AD7685
35EC2DD30B9A0C2ECB153CBA7135FF891196F9A563D3AE2BE18285940A1A70EA
DD984F27AD672FADAD10E80ADB5493BFA396271E461C5432A86CB157787522A1
57A0EF55C49978A94A5C778EF6B58CB0E791657B6DAB8CD211371C3C100E12EF
6A99E70FF71F507560FEC3EB968802E0EA8422B6E9C41D8A6728E403BB2E5878
5280995F9B1A3BBBADB149B0E8F9265776B0B67527D00C24AF7DD751CF51F095
07CFD63B92E85EAB503075D9786FB528941C852E2D382C75A577BEB9684AF30E
762E3A86B43A188CFEA5FDEE7BEA9D73FB445FBA23D6080B1F514A65600DBB29
116D924887A7A598018D6C1C76BC76B5AAE896963365783D4C2E72DFCFB57FCB
0D9C6CAE3C716DD0270FCC203E95B847105AB3EB6E4910A30F8B0B9E6AE768B7
64D82076C95BF7C345A8A5973D6E84B1628C82ADB3A32F0776A16A3F67C555F6
49C3151B48D38FA18996E7DB9B68CEE73A252A57C9AFCF90C5102C17262522B3
64135420ABC88DB06E31E238B6546399F194F71A0163F989A4D77F1C4324DFE1
B6435230D8FD3DD7A12E6590BEEEB03F6DD049F1C3C391460CACA7DC16132367
960B50FF51E76747D6A3C3F88209097A938EEA6A55450CEE728B74EBDBE7A952
FC20ABF0E668C8B67359B99EAAA11CB03DF3EDA9FCDABD706BBE5A33C6003F23
2928E3612DE58F2B890F3023BF5CC8EA8ADB3FA3EEB34A897C2AB13BEBF2C55C
94E4D98527C8AB3CDB3571CED1190484C04147E597D1FE81C0C798C1E0B99711
F3982180C730E2D57FAF2312879A9AD921499A87C0AD16227F8810E2D7051C4A
A45D2F0BFC9BCBF1326B38ACC24B14EE5388592BD478B2CDA54401D20807FC27
3BF5C6948E22074AF33F056D35CD3723D84831D63B6E43E1878F898358A8A7CF
94CF3CD72AD275BA1E4EC08E3468EA1C7DAC77DAE5722BA6503EB00435B711DB
5FB5C98BDEB59F3EFECDEB0D9F02BCD96B73A26C7EC1074F83CD410B347F3C02
03F8D52FA3FAF09FD367927E16F3C2234A5C485A06EB118283F7907A829EB9B3
13BF692471B5FC5B9BE436D81C5D103CA1E16122FD6868316364B9FC0C8133A8
4721D9FE04CFA47426EAED245196875A3706D05F78F256787606F6D7C9568898
46E440FBEBC025042A5983E44B77F361AF2B18BE63F34B136E7C8DD4CA955AAE
092C72C2E592D848341E3FBC301E8836BF086F32282A9E52EF3ED7CD313666C0
11B1740898746A3339184132509368D49D15C5FF6C84B52D11B2B8E12A6C4543
62CE6A6BB93EABB831A7556A302962977A030E8DA4412A3401DAAE77F9AD0229
E4FC458175FF7DA9B3B6C33B8336E43515A02856D8655653D399CC47BB24A2DF
3B5E388B99CAECC46D2D7526C5F55E2CF3A7DE56811FD89156A616E97D364912
9D4D4E36952448DD1926CF3E4C6725EEDCCCA5BE1AE5D4C34139973BA00CB109
9692745D9CB9413869EE99A36ABC40CE5118E084C209ABA7F639067B4B1CE708
5F7B9D4EE6B226E8A9528E5B999EB9F43FA3575F7FB6D09872A0240E51B65032
0EB2BFDCA863138EEF193FCAFCE5A676DB280E0041D12D30CD73F11A18DA71DD
A5C4F4D6E5435B08ACA74450593ADE71D37D1DA68582CF3077A0216831B0A322
FD7439737BD2D74C3C601FD3F6D6336534F49E4FB3BA34DD2E646E86654E9239
FCCDCD93ED9E659A7011A967DC131A35D08F979A3D146FCB1395A056C612FE2A
80B6479AB78F7638ED09E3E7A0FACD798BF418724AD7157613047EAB43652338
187DE0A7B7D9747DA4509CFA480FF4A686F0554C0889C782B56CE098C9025092
8A86178B6E58826B135420ABC88DB06E31E547435C45C1B7B09F5CD3D03431FA
13B3354D4EF95AD0EDA3C624591EC7BD683654DF86B589CFA0B2C2F1B733F700
00CDA74E18541E8606F8CBE5B315A2039ACEEC0C86C99BABD5CA7A33CCBCB040
D1223B416C798CF1CCEB48C3E3EF115A9737F881DDFE353ED9EBF60A8505E00C
D209F6F365763EC4B390AD17D0D600567C7C9113C550C7F6DDFC96C9E3818E1B
5BFC5D5A5784E9F184214B482A830D6E7AD392E9CB1386C8D8E7AA49F9218827
35F26D57D12C4F580ABB541141ED701277162CB591C57A641C66507725A0E909
77D9854FCE1D3040FBD316F01DB5069FF3EDAE6E559500E1DB70132EF0798C40
DBDAA948E52227F67980C92FC469CC030E6D936572252E41DA14F3D799402124
F1A4B342ABD710B357D5C666129D166FE9AF6774B14FE3BAF198AF70B46B2186
4F29CED632BF5182CB2E941DF7719EF03D21129B5B0E687303F73673031B4DBD
E4D8C863BA7C9BF1EE8B28304D089766888A5254BD7D698DC2858F410E246231
B08C5A625E1AEF568BDBA075E7A85E60FE1D91A600E115E70F639984B8F7BDD9
888C5A8F90D0F4FFEC418EA2585DA756D73E4D9A8A395AF413C98355885B2795
49626277509EF470BA92542CC508AA3C8E84243799BDC80187EA775CC1E2628A
39573081E9B944C0D4B5C158C66DCEAE585AA1A47EDBA106A77A5B2C785D241F
A48BEA6C827FE94A9A3A862D939F3A300111B9B755ED7F034F99A7A86D70CF9A
F11B2515142286DEA2AABF82B7AE9A7B2059129472D51AB671328AB0BD5FAF4F
3F2C3E08201D7AEEBDD708AD93C0AC6A6CB033D04420DA98B0E7F904534CBC8C
49FC0FCBC007B139267F83EC08B4819411F01130BCD436806D86D3079605CA2B
059D79E572DCE2E58B2785F543E067700D5DA5BE413542F2FBB02E60C22C7818
01558FE075E35405760F48B7F40C547C49A38970594176C4D1C1CB9FEC4A4786
09FEF9FD3AF9350EACAAADCD8D4D68EA1D1C5D9D581DB8AAF9FB4F493B2BF721
14919A7D7DC4ECE3A5055D73E67898E125B9014610AAF821D09533D7AD4C56CE
B3055B16A3E3B166D0BDD96C88817B0B1839C8F771BE90DC55515FFEFDF1E30C
340BF66EAD3C52BE11536F24E19FABCDAA4B3AECAE6FBEA950A9317EC5D7937B
732991E32DCF80CFEE01485B8E7799E63F1368C1B2E4907808C003218EC0FD5D
DBA3269485B4D63BE5BD37AD1DD6E8370F3F71E5D7308BB87DDA95EE2C3C5A09
C7577F2777C5E3C2597873F5FC49C56006CBF252CDCB5647EB89F1DEC272862A
5536617781BBE5E1C04F71564172E59E00E9253C9B160D225ABC3A5382BC87CA
CD2382A4F3AED9A0475BF2A12528AB5CEF2D59F066C2FE27CC11903B05D3627F
462489F20E18CC4DDB0863C814F342DEE328E9226C30565C192775C12F20DE31
43FB6E874B5BD7116F9166B40073D9358229BDC85FECBCBD66B29DCECEA53E50
176949AD34C338A08B3DC66C8B6CB9EDF548724F0D03DFE321AA77AD96270F0C
25B6818DF8D245A860D59BF6213A632E310A7C26F976D26E2ECBFA9CCEBBD794
7B768943C4656742401BF3764FBA0E66BEFD41F0AF36EA5A6777B661902F663F
D46D6C80AE296B4DD9DDC73442DFC2B6C2B667E14A619299A220CFCE5ADA1E64
94FFF9E4D785C267031FBB9D7A52996D579636A1B9655A2E1EB9DDF2E7721752
73E6AD3DF7B7BA6C61DAA4F4AF5E70B13F6F6CA317C1A7351FD623C8D730688A
090EF225F2D1798E2DCFCF83BBF286E9140D3915788E1C2B4D9FC093D16763C5
927121444FF89028B03F6EC8056F5C6B2B7F812510737A97954E10D29A38BD4B
EDB716962E44EFB348C5A0E024A9C35DC64A45A7046A62A5DDA87BC8D355C9CF
3D71E93AC430011A66439226B08264533901BA850FF1A8B2CB129D0238CD79E5
56B1A53E9C53D4E210C6DF4CE0439AD51CA058141EA209FD90DDE1AC33950B72
719B3549752D67A265AAFD9EDEF4D15C31ED493C96CA740985AA18C7F69E4E1A
609A235501E604265D595ACC5B376A425B37F9D9CC8535B2F99BD16EC9F360A9
928D2BC5F2734A2B0B0C2233D9AE5D06B7064DDF4364EDCB9F4D57B6AEAECBFC
E6C20A3291F4374CD9C0A88E8018AC181025AF9377005A6B6FCFB81D2CB88D5F
50736578CB47D50503F90EC09925DC033451BD6A6A518777CF2E2BFA2AAD69C4
0073AEEA66480E48BA463DC071468BE98E79B6B77D1A48F1EC85AC2D60FA32C2
B896C9CA2E4AA52D6814C3A90F49453C4014F63237901C935D375B2F79611D38
C18889358E8B12447279E9BE25BD4AB0E542F3F017A5D00EA676B71740AA4AD8
1F5E7E44309EDD5FA32DC85ABD349D68F0EAE6D5039ABF61C4ABEF37252C1E44
BA2E6D072D9EDD9F9EE6140EA2BBDE45BEBF387FC14F1D50CF98C46549F30B5A
62907162B395ABBD877EF1C6A5DFCA240A5C9C5B7E4386A38A4D59E0ADF68891
5B7F6D9410ACD7E07EEF8474F21DA8E14C2C9E8672B0B40EAF7951076137021A
5E0A738CE467FEAB295AB04FB0DED3D0C187D4ABBDBB758232B7EFE136E412F9
6A32A8F9350EB34E79BE368D7EE280F58C9AEB90356711962B97ED67821789A5
DE0F66F3DF8E97EF6BE3F1C940CFD2D3D5763BC96FA5D1B37B0F599384399214
6ADE65CC87DC0B5EE2817DE214DC90AAA2037746E0146235CBFD649F0F46784F
AA3D9C9F3E9529034060F76EF2FEA475AEC43D5F089AAED58B4CB3E9C7C82EE1
FE5CD1142778C297A4CBA83A501C8DFF99CA74B2F75766BBF939AE594E5851E7
5A258A29105DAF53ABBBA7ADDD256FB23C51A1F651596898CEDE6D1A394EB7B7
831203194E76D375F32A502CE810C56D0D8BCA957857BBF8228BE6733E533DD4
8FBF3B296D8E1B1611D4B3B244875E4B34F947C369B7B7F73CA69C7C5B01DD80
A54683E962767BDEF178B16372413F810175EF25D0E24A1304B93408ADB8F144
12B0D81470F4532578D6798584C42C033B092C99D92F3A527DDC93BDAEF84462
6BE6F7D76F49049B6A79670C7D91373D029467288902E4B2BD41B00B39ED9650
39082768807109F38D7E0D59F2A114F7BFAF08796FFFD5959F139651CF085317
CD88953E91AEA64A29297E55C3179C3C6D2A747A69D5932F180F0A545090E700
DB628FDF4D9E24AA996680AC3324AD27BB940F9EC37C3C1CB2168B3D1B426076
47F6EFF89C97B3C0F02033DB976A55583FDDE9B18DFC863F0B76ED14C409BDF5
032921E636E9F3805E2C8AB8DCB886F94D51A32B031775B8A30717B84484E5E1
2A27FAE2F10CEA6C96698E0C62E9296F21A2B5B44EB41C89F3ECDC31CEC3E695
66D09CDD2726C2A9082B1AB14C6BCE6B78D38684C8D7DBD0E603260A277D71FA
AEC9A6C932A07C448363D45D80F3C681BACB7EE358949916491F842864731E3B
5774792C9EDECB023AEBF1B92EC67EC42FF3E78EDD044B5D4D6CFFD3330C32D0
11AB837730486DDAFE77492914514DAA2B912774931EA8F95D56E6796555F656
74588FFE57BA76A68BA319726D79508A26591C2581A938B9FC75CBBE1514B095
2353B26F0CDB7F416A6A6DDFC74BC8516062FE9472309B1750D6347228647244
F8EB2F8DEFD25B8F483F02D6FE738984EAE294DA8C737FE5755478A059595530
0D7006BAE1A86611C57FF3A3F6E2178D61B6228B16640E4A8594A678A73538E4
589B31DFEEC7BD7D8B06F3FCA418B24A8A417F7E9C1F31DD4E519CC8145CF926
7673F7C4E2314914C1732A5446F9B83AFA3BE04171939B5FBDF1682C8957F769
4843C1DA6938FBF88CBD5697207FAE5068DEFDC37BA11A4FD17F986D7BC3B3B2
3D9E45FC6DA5C5981A80A27F62F61FD87D9E1473CEB699B084ACCD44027A7E8A
840B45A19F41FBB33246F317D2FAFB17DCAE007B2F7FA81E564B947D7E456001
D08AA572C6EA37C6C42C659BDD23DD7CF8A9A81458998DB284E47E0A93F9FC49
CCBE30982AD2A8750BD085EB92B005D797B31D609D0ED4BD6DE9EF1F326A2DA0
7DB8ABAEAE92E48808A78BBBDF6F85C9F2017582AE4B0CD3C1CC33D578BF13E4
2672D17AC3D8E6ED3CB1418589938B22F0FD149CFDAEA36F9FC00D08513421EC
68DE41BF99512921346A87A21D755F5BCA10DB82A08487FC064D626BA549FC80
8A1B849F6CDB0C43B3590D1F350290C84F6A6969ABCF2DE204B8BF1FC7D06D3B
899033BC7F0548941BCFF4095A1A876A049BC9A7607AB9B9BB8106A4DAE94854
9002C5969C7066F1629B49FDB893DBECF66209CA43F65D8A739ACC35A8556C09
CB74B3EBC147D38ED65508938449EA342F21C85480DF6037E30472A11FDF0ECD
6A5EEC8E9AB51CC76BACD22A504DCD40BEA70F6073CE5E0DED769C9F6FB84C87
A5298E70D1CF6A47EB6E0560CBCC8DA0596BCF456AD60EAA40F7B6B7F0508B26
BD4B075B8A212CC7282ACD35F8B57E4D6E997493DD1F3D2EE51F9FD4DC2D3837
946BB2D5A2B94B7A9DF5CF6BE5F7BBA9EC0FDB41D0A2BB7384B96D8460AD2A64
C35A4BE47172FCCD9302078128E88547A4E487A0816795DB4389D1E697FCEC66
24FD652DF8E0381C67463D07044AF41D3069DA23003C1DC1968ABACBC9A34B2E
03C938B3BA9385F5977EF91EFA95258B6F337CB9BE1CDC157D383CF8F7473B92
B5084420AFEB3788972DDCF7C419C3AA968BA13FBD17F44C6CA1C17D19567AE0
0FF68B3034B3B66F093A46408FCD38B85D1D7CCAB29F2752BA6F7181D35740F0
5E52C3B31BEABC207FD8008B916E0C5873A0738EBDF04151841B23F48E6C18F2
4F8469091160DFD4AE79EA632F4D54104FDDAAF375BE56AF47FD49CBA2E78EC5
3B2848E0AFB5D74BFF42E8FB3D46224DE3658E1DD94FF35AB6A2D55ECBC40E20
568264FBD43A324AED065383ADAC5AEF5068E7176101023E68DD7980ED85F957
8C74880A7413E8635908D0EAD76F76338DB8AEADE7A834103F9E3DC40386FD67
447B7C2C9DA70B8D47EF7A5512D6EC950F6C46C01ECC659F95BAFA45441FE11F
56E54EE387ECF3B70C0099B8F323A71731265B8BD5D210AE926C86F93F025E9C
0AC0313210017F82B1BF089BD28BE2305961546D04C66EE0B1C636C40E4F37AD
463B9D81A24F8DFEF77A8F1FA267CDDA41461FE1CCBC3FC032989BFDAA1FB31A
98D0887D850F2AA1BA89905CE549052C3BD503061CFDBC32134EA17390AEB5B3
4134F0BDC8849017E6E77B04B43A032F0A9D572910AE98FA9E1A7168557858B3
D08B99728DCEA9A520C13824944AEDB623C571FC24EDB5A8CB22ACF60D22105B
A275047A01D525F40446181DAD8DB48B9D54D73227C4298F0B6A19C497B4C54B
CA21EC68DE41BF99512921346A87A21E23D0405A5877A75E03B395D012B8BC5C
0E04163CA8048C3E1C5F8082B6CA3602A26403B3CDE75D2D19EFA89370B86D15
56BC10D4CB5CAC70D0F08894C96441163AB3E15A06027257C110BDFD94D7FE5D
3F3E547AB7D85F1A10D6B7587CA36C8712E36D1C8D87FBF3BF9739E25CF526F4
5B6665B82189D8340D76FCCB9082E25ED4B50D7DB2172E7C3F6B0FCA3855552B
2743FE2C17CD43FFA7D1E6EE27E75EFBC5B597B6BE6AB60356E707E5343ADDB2
E667774D3E27D16964F9ACBEB40ABB45E24BFE3DBBC1B3C6F00EF26DBF72F639
AB3B01AB8A9BB2A6CAEF429F2FF4A60CF6B58BBC64642C60426DE458114454F2
BBD8ADCE78A055B8B2F26618C6D83428459E5845376F997446986907F061765A
52D2858592C23F4EE13244F8E8FCD31C5006AF28299DF7A89C4FBA7D30752A05
FA106014BC46BA4523B34ADA1B5D31E27DE297CBD351442175A1B1EF865445ED
BA2C9F4D42263BE7B007B5E747A9D8D47146CDB5CF915EA1BBFB61AD2DE57EF6
0DCF5A4F60ABF148C31012CDF2078E772217A856F22CFADCB2252C676973A620
6D40FD04169C828912B5E1CE273396E836752BA385333CEAE2ED020CC8113FBD
5B6AA2DDBC92833AEBC6E7CBFA9EED6A9BDE48336AE0A2A60A0D4B757454DA41
1B6C3FC50721A92E2D981B824DA15074CB1BEA0FA116002CA02CAE79CA20DD53
9A6046DDDB512666DCD6594737FA73EAE756FBBADD2E1386FE9ACC6130A67A00
91546D483D807126DEB7E0C94CAF9E01ED6C223A82E9239921FE58CC0B13B522
BEE7E21DBF5A68960CC47014C9E2F1889D158B85290D4E612D5D316E81D0AB7E
C59A2FFC796E33E4579496764A93FC4A56D4A62805818F61D2DC3E24F275916D
A849100D409D6F326B2F24D4217C1D6F2A5F3DC8E90E7BBC20A48FB5F9333D89
A50536251C4C11C754A44D2522B4D2724B71BE1E3C82E055EA49561FBE274C93
2F7D53DB08049708105D444AACD6EEEE4A4FF4534004A915C108ADF1D3B545FE
312970E0F27BF495FA39FE7C9B7A6AD51132D6B6B366063CE605C926A1DC6D14
2B1220B1D42165B7B58B7F38B5FC523C3518377CD800A7C8BE60611581F94878
6F2DB3CB010C0898282051FB5E063C90A2EFF603B57D1BA77297F8A64D1C43A2
AE40B038CE37E5830E8343046CC24897A8E420176B554D602E293239EC675BF3
F310912E830CEDE6C36F526DE4432AAAB19E498912CBB1DBCF79BC6B99E8C583
5EC42817BCEC5CD7F44E3EEEF82158712B2D95BB673DEFD6B006E2B69CB36D75
B91096A56BD3044766ADE47658CF277DA14BBDEF36BCEA05026C42E9300AE509
3BA94F8C4051434D3BD77B1E35CAA83AE6AA32067DB113812B6F8C5A668387CE
849DFCCB120DD85CD393604FD4E68AF23ED7704564C832F41C5C20372792251D
60C307BDB22C77464C7DBE620DF8B65E613A9F848C5C0B5BCD65869D1382BDA3
F528516BF6E3C46C01329CB3826A650171C8B6FFEEE628574E0CA9436FD816FE
28EC7F606B995A1260A131A29D7F2D8F5B873918976FB422225AFE3A3F92B85B
29C9323E28660653E1202A07C5BBE976434254D07104FCDDC439331075F61FB9
3A4883CDDC861D0B1DFF5FA599D67A4A3BAB2D9C49CC1A97673AEE0F118733EA
CD30A472C2C9948652490A31EFB184F781387785659E0BF4F88910A6C3C2D6EB
BBD5813BB11DB14064F1EC15387D44FB96C3FD5C307A7C873898CD1FEAE27687
87623A6BE30B16AC9227252FAADE11879DCE89B9ACDFD83095F0751FFA8C49B6
634BEFD47EC39E0B928D1C8D7C0C307700315E8E3AECA3FB8B3BB423D9BA6366
C33449E1F2178BCE3A8297DDDD6257676FF99E33AA78274219A3D52FDFDF36A6
E77E3054870B0425E199AC7D748CF32B11D51E64D053409ED44A232B3192CFE6
A1555DB518DE5321279732150BAE5EAA9AD3F47CA40241530D7E74D177F0F3AA
902AD54166AA2B9547F077D36EE65D77FEA9833F5D455BD69E29B65EB2527C6F
5D14B0996F9ABBA278E5F23E861AFC81D58DA932B431AA82C9FFAA1E5789C1E3
1CEE59A30E3ADD7AF27CA40E258A1FDE70C0ED8D059CD35D670DFBF2089A0E7C
71709B2D9784067BD07AB0675B8FC2A39D0794FAA2BA68EBD74E49EF8DAC4A0C
7E1C904D5178CC9EBDB537B9C4C2F669ED0788C65B1E77444A47088FA7B27778
9C3C32B95E2633951FBC2E5DE15E41516A622F9387800FB64D740B7B5692560B
ABA65FE065FD988E33B7D90D3BC6DA64CBA374236ED385777035850291C48D82
E1EE5471775573397AFF9E07E0422F9270B93E912197BA3C3EF8F0FF4F82A8D7
AB2352BE2B04EA467D303679A609522A90C09EA9D6F2EB450C30349BD1449253
111FACC8C9F6C0D53220FACB53DEC9202FCE360FD75CBD9A827E50A4A73ECDB2
BF3FBC775C87E97FDE32A13181DDBA016BF0B8F39142E3C36F375FBBCCE74FD9
811F7D05D239E67385B6279B8947E54F672D8ACC72A4B70D652A1CD15434CBA8
B4E4C87ABEB28963164A746B558F1713756EF9C12D288635D505315C059906AC
37113CC01B5A57966CB2FC8CC6640E0EF16A0BC3ECF3E0952134DD6A2E6D9D77
9AB714AF58061E02D3D4F36FEDC47DC99E5612041D759EC64A33B0EECF51DA5C
6E5B804EFD2A8EBE557A32CE4179F4B99EC9E3E445BE2DB9EF5D34E7F747AEFE
F6B4A74F1AE429CD0D1AD0504E893DED11F5471594B27C30E97025C9F29EE4BC
9F70205685BBAF87266E14B81D6260DAE1B683580AF66EAD3C52BE11536F24E1
9FABCDA99BC0FD9033F21C47E9A5659E22B8CBD288148B15534DCE7D749788F3
8EB5F8770332FD44875FF0566E52E890A4A83CB6FCB80CE032BADBB4DC618A53
D4BB49A9D0A5FE80646E6E2141C71484767D47560F3B3905C2E9065B0C49585B
696E0DB2231A78C2391B6CC57B09586617474B3A0885A610A2A4CDCF66EC55A7
E35C0316199F508EB12237E4758E537877B9BBF26FA22D376427AC06A785140B
B014AA5B8383F6AD98DFD7488D961333336132D0AD64C2728DF4D9414F1CA4B1
3B410DC33FD7205196F3EA06E49A5D6F48DDFF1A110EE8BE32A4C1A5DD5659A0
35448605F5C42C7E54D5EAD7ECB1DC8F5EFB068D33D6A3C41958B7BF321CA77D
24264EF0D9AE9E95BEDAE2D47FEFB8B92A16F592E410AFB85F43A4178662EFA7
68E5D8E1847AF265C8CC17A2884DAD18E0EB09FFF006E6CDDA93F18B00846256
FCF0E0CAFCBAF74F1BB3723BC830DAA3FCBB3037BB6E9EC5779E96CC5153167B
A36C34DA3D841B0C31C2EB6CCF7BC7C5A66D486BC1675DC6FB9A9C7994640923
82A9289B21DF5F456F6AA21A501D2530969281B85F09C03D370D6CBB8209848C
8AF58B7309BD4AB80818F6C1C442D866F9751BCE099BDA05362C779ADB8626B2
3C58F7F7A0DF0A797150296B0B418FED2CB22C5C6050F61800C9F578302026FE
0951C3F4D76FFFAB96C605EEA3F8D8300DB656525B73A38C72E0AAE163EA4F91
076CB42893EC5E3A2EAB2BD07F3F3D64DEFAD31460F401599445B8D890BAB76E
5248A3CAF255D11E66AFC6A4EA2CE4D7EC43C53CFD239D73CDA5558A35C01ED6
4CD1A218A57061BD90364D42369CD443C844C0BD6721041AA6FEAB4E905F3B34
47EF6AE66F30A2B8BC9853753D44CA1453E7FF6B27E5C562AB1E5C19691CB670
89C9406EB30331EEE949F71E64CF8ED24999CCD6FD3691C5E3EC45357C6153EB
D412A0056B836A358EC93A74B49D1584932746E90B3BAA6A8ACE63BB86A7C2A4
CF3A4DD4E41EA47685971093E114A666A742F4CB95BF110410A07FADC306D7CC
03C967D045AA5716DEC59801DDC5B98DDDFD74FD4D9F7F5ADA8EEC22C2ECBB71
1CA0888C6A4E7D1BEE5207507B0BD419C0E5391CEC96D9EF6D9F7836B85251D4
DB9CC6FC402F8EDDAB9441233E5BD9D8C3D213162774F745731780467348C6C0
104FAAB959A4024F399AF2E10D2A6A411E0F9382BEAC2484D8336D508275EC93
09D37CED0CD4E16DE1635E5CEB4D92D0DB863EF4517BE1E37E8181D534E37211
A4322E7AC1A0D323C84A10B1E02E1BDB7F6C19D08C25E59E6172C02CA5BC887F
3D5800D70F1D4131B640401778CCAB80CF101BB9F607E526096DDEFE8C9BC47C
F1B60AE5A42548B9D756D03F1FFBF4AF353D88C1699ADDE69F0ED755FB775299
BFAE57D76B4780C64CE32B4B9425E2698279AD86998912BCBBD66696EACD86E7
35082D3911BD471DE194DB09EA131B3C77FEAFE0734AAEAC570E47C61AB077CB
7579F4A803AE2BCE0249D71614BB40216D0ED1EA283F58EDC99488B1A3EF45E2
13EC0DDFA3BAA3150F84D4EA0E7C610D9587D100CC61B7402EF3A3946904477A
22CA849B42D2FC04A672EB5D7B0B7F3A70798A8BAA00D3D25D4F05F076C55FB4
67E2F3B930F5EFB2D86D815DA94EBA58C53EFDA8746DA7FEC6B5950F5813E371
7C31EE4C4D092A1440E8C513B8EE774644A02F51EFC5BC0BC2D8D14BB7F9A047
A0AA6DA6742CA2713F799901450F2AE7A17214D23F430041988AAA4C27B1A196
4179F9A15A8FE421649B59E31ED11474C525959BCB7BB977E14B23CBE889C731
D20632FC03B2B28CB7A6FF8E898DECD6533C701772D701F594B93146D6A2CCCD
3CC15AF662021467C39405E50CE68150D64EAF85FA7B32077D960159AC908ABE
ABA7B14EA98CD3E578421A6BB975F92DD225D7E9F062F66B6C2418619B6058CB
8BB5ACD6BAF878198E2396F751F341D757D6232DC5E9D02F6D8D6C898B12E990
81F921D15BD299DFB1AC38DB8DE6B9F1610EAE1A548D7F03A29536B7DAB6F6E1
8525390DEDE41EBC7BE246300695974667E49904EB3499AC0AFC3430999C7423
509A833751ED82C1D45988579B47E61D0EE20B360690477ACB32CA6E460877B6
ADABB828E33E3547481E6F36564829F0B59850B3EB48D702507E6B04B22D9AE2
C0C094F4600D90AA93800DFFE29D75B75D5B9469560C50E11D8D01BDADBD1EFF
55564CFCA0A02AD913ACB59E8A98D487ED02EC53B906B08CA71F28FCE64D117F
FB8CC9D91F8D93521BEAEEE90F03C877658B6071E12DA9A1A69086347F56E190
1533695655EE42BF446FA14CA697E7976A1F8A5DEDBFE52B32BD23822E7C24C3
9D7EF5D91818B80BBA5E920E6FF2AE617BD084051708792A5089129C750651AD
3DD3B7CFE41B4359C89C36AFB3E25362A67A12D1C12B5A5548C8E22E94A4B62E
337865CD47A38A540A0C4E8BD60CBD038DC5EFCAC44C25A3D185E483A0A0B509
17167C85AFA1D3C7E7C867C443CE8FC3A9BF3DB46738727915E53D8D4690A28A
17B53FC78FED8E7F3E0281793AE4F0B954288BEDE787BEF2EBF481C4E31EE84B
5AD03E333728A5FEB5EABEC1B223A217A89F4D21847EDE471D4290737DA53BED
792DA48B718B31855B43B90ED55E23B6C15C451E1A190C174BDE9C760AA0D018
2733943B6F21D943AAC771FD477D0952BB0D828BF269ECC366CA124AA7FA818D
2A513CF9C637E680FC86A9857B003046F55FA1585EE041F16B181D5B9C048B41
7E639AA00B0BFD806FACB039A7D62943E3C6BB27B725D220C79173838DC8F1FB
7EE5411C8E41C38A43EEAC60446E72E628F09A97E597052323D68795E8457D35
704C561DE0ACAA6B4D82E60BC67205547F2C3BF076B385414429C43AD6E30255
DF5CA2920460CBB67DCFDB5A885DDDE886E655979E467DC6547C99483E2AA1E3
A0E8570AB0CFE5C8FB8FF538B1093E1F999041B04BBD871CED84D38D33FC2CA5
59E3D62EE512FFD6538118CE9627DD87BC3DE74A69A3C355BC13E4D466B67B5F
F354B99536D21BD781C87EF69EEC20964F845E8C5B82156023C5D00FFE3CE7CD
F39079646781C45AC84A547DB43E1DB3189524C8A60104E9244A4D869E2B3C2A
042D06CB38D0C557EC9D807427085F8BCAD09068502C98C0799EA24045479C3A
B4AF7BCD25FF1756C2EBD23079F286283A4A881620A633205D04A802EF7A7DDB
E40190707E2FB8BABE3AE95EEFCB89DB5CDCB3AB65B3F378F13D4D5914AE11BB
AC552829715C8575FBEF843969219FE8F9A69978E00BEEABF209F12F5898217F
540B07AE46D117F1A0394D0BAD6A6D318038CE617CF68638028703894C9B99EA
B171F44DB5A7B2FE1300A7CCC6EE14D99E68F118C9129DB7FBB695A7B8E50DE0
5D767DB0D29169D1B1D70B2D38F4475ADBDB2D13A7F6F7095F948A313C0FEDF0
7E1CCFFEE1C28228BBA95600F8893E74A62119AFBAB852B4F52F32DEDB4C0C42
336A3ECC10486C74AB05D7CC0020327418D0F1758078BF655B0EABFBCADEB608
0BAD7CE18623BB65C781AEABD7FB5D7AB1755CEFBCB423E67B1864327A9E65A3
3525A438DF5CF7D0350614D63D7E4A65030E5203B2F7355291BD78559ADDF375
B21EF5CBE7EBAC9F93B1D49BF5BEB8EF4247CEC133F9C970295F39FA1C3DBA6B
14101427BA6B2531951A5833878A4512D3A671B21F765FF70EE8B3FE8E10A40C
93C73E698FBDE06E3EEA3C2EA172AABB37E70E8CBD02F10A6BF2D91CAF5C622E
EEE00257197197CB4ECD37751466B0F02A6373CD772555CD2FD6B1944B2FD5A4
B4225A1C2317C3F897152ECDA618ACADFADB86B3ABA6132EEF858411DB81442B
ABB4C4E94B5A82435949B6C8DFE565DE7F55704EBD3FBDE0C512F0D004990923
0ACD622DDA627133EC661962F93828CBD7CC6BEE897A226CBC66593DFC7507B2
A86810E5324AEA8A940B85DB02E96DFBA82A20F1260452FD6044AED52B08EF63
2F4D54104FDDAAF375BE56AF47F350ABAED9929C1A0241AC3A262EABE2E3D899
3ECBF84048A4AAF20AD5D81C629433729250C6F4D52659D651773A61074778EB
BCC3032239CDD2DE682E2D62C6373B30B20830884117FD628E02FDCE6BFAF205
16A8FD6CCD80A215A591AA3CD9769CF619F845FF8294E515CF54F033BB3C6EE3
932ABD14297DB82A1C74D0337C6382DF82909F61B2794F423D05D3FDEF71E7A3
F238BA39DD63731F7925FA33BCEFE3225ECB0E23D0C61632D84E93518D738038
679F27840C10ABAC9E44EEAA49371DA58604CE4A0C671FB889EF60C9F5524FF9
EA9B1710FA2932735E3A5C2492BA0E90BF11A4E013B89CE27C2A36F06F3DF2C4
87C13030BE87C9F1E5CE110CEE6B467171808F290A953A235F101B670A6EE75D
274790C0B9F4FE710DEEEEC10EB5F5B1AD9F6DF84CCD48C57FB6B420D7C12612
E1B01DB1F7BBD7B7BAE9CE7EDB09A1387E31A31799FB337343D92FB949E0B430
3966A802421EF113723994C14307D614E2044F38542BB4C168F625D1351C54E8
8FC0FC7ABAAB13AB1E143EFE905C3A53CB759802EA6D17F59CA58A9102E86A96
0BDFF56A762C1A267CF05A70CAFAC535C971397CC615584AE44B57DC0FC72E59
7229F2B00127E9DE38D6007BA62D6AD5ACE62FFB970F726AC9128ED8535AC18A
D693E0B58210820BBCF0318D0844ACAF030715A6133C7929BF0F08F586A85003
A7FEA9C9E884D0ED35A71F00119286F6F6DA7D222D4427DDAF25B2CF72E1EC79
A8EEFEE360E94A50FD447DED77E902195DB9DDCEDDA38D4EA22B3F912EB2DC12
DAC3E7E7B0AD449A81B0392F0FE5A76C320DDC390B041D80858F5CE1C414D709
C1BE6A726439ACA1DA2BADBA7ED0A34CD4FE2E7097A87E844EF45CA7778755DD
75E6E8AFC57CD5D98C324DA977490CE37C2B520C8B4F0FCE2D8A48B389D37BF9
26F1FA3166ADDB5CBA95F779C4A84741EB8852B76C9F0C91B559FF810AABA692
1E161C6C6D4FC06E57BCE1499CD1785F2C9F6DDDF5B4ED92729AD828EFF7125E
01C6BBB5BD3124E283462DDB1780D39F616D6ABD1C70EF1D7F5DFD2EFBD3BE73
D114B76216DCBC8FD96AEB8309583D2D5A2947BCC311269A318D98153B35491B
00C62D52A81A8F5CF16C25CAA120DF4140DAA372B8317F50F378013DF0AE2BFE
DD4CCD374EBCA5D42EF2E1C47369A1458298696BAA0BCC80BB64F34C4D4BB7EC
F5DFE2444B970F290269D5F9D08DA856287492A548F0C679368A13C6477E3197
8CEB2E24EC816B5CE8659532930B68251E58E5238D15F577D65788ADA8197872
AB4460F97818B388BB316ABAC7CE577EF034686C717D6BFCD0B20C308E8F8324
34FA4DC081442B2266D0964CCEA72E71AC6C4AFF3514C01DBBD3BA2A5DE4A609
EA9624687347F790ACBDD58074B187F69F677BD2CC94A7F80246F4CC876367F6
5617FE928A2D8D8C5CDB5B692AFC29E7889BA2727D5D790C7789C184F2DC963A
6A3269F8B6972C8742F5963174FF8630B0379DE08A1DD6CAF629346C4086912C
0442C7FCB7C0A757C9ECC5500F58421A0C3E88A9EB3AC32C7FB025170CF565C7
069CDAF1073416A38E96700EFC466235824DDCAAD89FD4A961576D78BF785F42
D32F498E33DDCC13769474EEBB90A3B8D2A1DEAB5F0DD2F8DF86FCE519E27F26
A8144C7D576220B099101E947C7D0018194BA4AD5F0D63C04FDDC125BCE18F8D
9E2AEFE43856C7DABF3DD1C6DEB9EB95C997AB46AB2F000A9CD80932A18622F2
C49FF5532684FB8D0F4A7001697A0E18A7938C769EC75620FCF91935C39BC225
BB9DA2029D2512213CE2CD9633D08B2D7621680EC064191CD6CA8C29A273712A
C1141CA11E072FF92CEF1B7E9D6877C13DDDAFC1D13DB4735B8015CCE2A38F3F
541B1C0D5D0D27C4298F0B6A19C497B4CAB678BB41E92EE8D0FE3D40EEE01894
C646E563F29E4F85A84E9E33ABBADA16E6E2F567640372B5D3A93CDABF904EF5
E64EBD7AC5584B0D845FA25CBFBFF1DB5ECF61D7C8CA09C6D3386ECFF418ACD7
A907B17DC696E00918566C27DE8F1B8C6F8D4006C4BEBCDBD0B709F19794230B
399EA37A735ED294A769CBD95593D0DFDE897A514EB675BD0126AA8C129B076C
FAB9B8B31C646104AE57F081583D2ACD4B96A6069A3A42EDAD84EC4F14E1A081
61F15E8A8F36D65CA6CDA302E3B509F23B8B0203C5BAFF1DF630353F3DAE5D80
D1FC0902AC2925B98B2E9F323ADC748FC16B24789E4B0A7C39A435DCD0550D92
15E2F078BB0191EBABD63D56D96E48E7076D3231E834E6E9A5AD256243C33A84
E2945B0FC4A9B94F7A55D58B404B135052BEC7BC17F33961E5DEDAE2C1915CE8
9DC8219EC2790B9063C79B59B1B3264C826E9C871D34BC5EB0C50EE654087B18
2B27B5EC6FD10BE6CCAF6B595B09D851C06B28F46EA8DC112930F62DBD9217A0
94CB63703E881A8604C9A319AA92CF82E13A446DAD8624B3663B8C5A1470572D
ED087D2762DD72E0FBBD2F27EA07A6EDD93C973BA15E5D05ECB85A8A8BD8B2D2
53168BD78E6B5826A0E0103D388A9ADE4D1DDBD5CF25ADCB5A7920978E142C36
E83FED0C66C127D69450764A03247D99257A719A8853FA77E3A799D0E51BD28A
46F39B1972F2699CE45850E6911AF33AD215CD8B97C4250C88E4C9E1C5A46937
98C47015E47579D77339CAD6BEFF1153B8EC82A3E591005E3571060AC59F1607
5AD57B91A552F6414775580FE135F9ED6A10F67807904A3DA8CC2A0A69FC0107
68841568A4FF4999FEC734CB931A97986AE2C99501959466FB3B0240D9AB712C
CC5BE882996B6A2353B61516DB1350687F1B2936DEDDBB3573EA91EF34E94518
58C4FF403FF43F62F8CDD8E54B087CA6860506B3A7DA51CF9B3662A76248AACF
C859D5040A8149C98AD7D555FC6CA09CFE4A7D294D8B9A61F520119729C22B72
C1AA2D8B50945B1F15497BD929B4A4F5FB89F7F361209903FA5B8AD25597DC36
EA2187FA70743CEC61D7B66B23A0E5E597A0E31D19B47CF89826576E3950DA64
785A2A6933FF04A731A1BF763B67DFF034B5E1F92C47A980DF4DDD6F59BECA7C
8140D60C67EC68E257313EF9E4F8388CBE02F959E343E47592B69FA529551872
2EC8C1DDF0E0B7F663B82C178F70D1D7E98245675B4233210EDA690FBFD3C186
96FAF0F4C17E67B8E0F336FA241045915E7CD30D67ED069FE3A8152EFF5009E2
943E31FE5A345A6EF5A2FA4EE8410507FF420DED30DFF0B6940B9353E919F282
6F3C3896A5948B09D12E78B5522C04227C75BBDA099797614E22D1A4305D6E57
8F0E3EE10283AD5B1246BC128693233F813D61ECC31396D47C36AF1A5FB4A6E7
E6A81681C49AA8159005EBF92A552F0C9D9F89A8A1A66D883E97A5D3F7367826
83A71DB14C3B34A956E680724EBA9959EC40E74AC85A36713A747744CDDB9A8A
CAC657729E02897662A898B02F4AB9525FE3A2FE25E6C26E88EF8AFDB9319415
63A8BDCB175F865D915ECE497B09F28D80A5F74FCCAEBF135EFD024F5F0A43F8
470C36EC41BFB8F794C365D1A02BA51C4FFDE1763A911412E5F1650A6D1A6987
4CD220776090811054D61486B3FCBC57D31EE18FEB0CFF978BF30DDBB26D4CBE
3CF9D5F06EC3CD777459183C459DDF6F502C4D0B0B7F2A46D005581D8BB789FE
B9ABB159AB9DA78F7B727BBBD42884898E87CE93AF503FE133F4AB2FADFA0B6C
5CAFDFF4C3DDC2F716B0FC39C735539CBBEE048E7DC392DD22AE9B435238E37B
117427B2E6BAE97A99549BB1B8DE0DCD0F88A1C7B517882AC0CF847F537DAD5C
01B4356278877A3A0DFB36A7FB1FF6DB4106E9422229EDA015A2A419C03D183B
4CE75832A580BAF3CD0EAEB7B27D2ED9182B8558A252637EDD9646DC7757C9A4
BF7EFEA214425670D1371924715C647B5762C95EFC8EDCCEB49C1C1E69456797
4E8823FE042D13670BED08E46A260B181CD3BB4A5728CAB1FA1A8827FEE9DDCB
D63348F93617294D6A763B005115A59ABCC264451044B829134D8D23FB334F7A
99F0228780365D450D3C620395E5905047B35168392007677866D94D204C2FF7
5257807F485C58E2644AA1527BEC7974BC899080986E1F3E9BE693E9EEC92706
7C4D47089DC678297F92D7A1E69A9F1CD24DC88196BC6ECC3CEDD921DF28921E
C582016AFDFA73153FB8B51E4C519ACD5E55DB7541F11DC6A6E8EAF9BA674435
2CA89CC4473E767D5D0DBDA354A04AF03566222A5826B82C23CA284E467F54B7
12DA191FDAC98DE212E11D7BAC36EEC5FE545944F9F8DA03DA801913E0D781BE
1297690038D24257E9E90ACCE8BEA00473DBB1DFAB99FA47DA8067CBD51D4C8A
A2865695535AEF351BE1A43018185F59E253F2E520E83620AF0780DFF06D252E
C804856DC2F90AA4A4348D14AB60B193807346C1EB3B84BEE57E77CC92D74DBD
DDD54A633404CA87120BB1D8C9239FDFC91EDD0E14B50720779842240E933F6E
35A76CCD36A02855D3C717030D4936315E7A971EDB40681A19C731763A68F328
FF26DF7F2BA2D9FBAA38274A3261EF931004A4F273AA173A49AAE9D91F192D12
007988264F1C977FB26331BB34D89062545BD278605A7A11D39CEB1EE0DBB6AB
6452A3A3ED2E226AF62AE7021844CCC130BBF2FC195C5EF7D38DEAB8BCF33E98
6D26363B8AA8D75524FF1F7452E446779D009B40E48DA88D1F26635CCD1659E2
1C42FCE036048ED1C2467468D16A434366D1C553CC56865A60BEC4D3AF418056
E3BC22451EEE2F90DBE7F5123D57601E8D21304AAF093A4E3A87C33435385DEB
1EEAE1E2216239D709382DF1A9429C47689F0498C3F12B475F82EA797E88E0BD
4A9F6DFD6C974EC4A3CD41BF76C4DD11530290B779EEB03799A0ABA9E1FA9257
58F706B950ACDC663987955975CDF453A3D5BDED8BFF789F15DA9390DD40EC30
06FB13A88CD24A0ED42766DBCEA4CBFC031BE9BE61816473E90618CA402375A1
978A2BDD4F8B0FFC721F792FD5B116285824CAA532756A7647CAA05A80A86453
01FDE284532CDBE95B579C947E7DDBFAD564956E74538443904A881CAC6F56EB
A1A8A3412272582606749F3F110AF5AD65DE32F87DCFAF563D96830669FE1728
04A801A4620AD6701F54164499866ABC6E7C0694C1830F5BF491FF7B6ED83D76
472BC55D9C2277388F59ECFB4FBE6201AF5C94462BF3EF6C34B751B4D0875F1D
F9256C1A1A0F9A29BE2BA3079604492013FEBE289F4D130A8A6D58E3623C017E
4802F9F04D5CE5656355450B2403A2644EB5A1DD8A78EC027855
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 3 /asteriskmath put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AE6ADA0192657E8078A1D27420093FEBA111333314658021B90DA4E7A8D4B829
F1795501020D5FF0AD25584C1D45499A585CAB3807A07279D977556EC6AABD93
2DBC998B0EDF127D030B6DA474DDA1BB79AA4AFE5E1DB4F246F198FA5FEFA145
E9D3741D1FA19304D320DF38D7499B0FC3C9C838E5D7E8817461770F2E73B562
ABCFDD32FE59887D0646650B2407BC4ADF3CAEC1863ADDE9A6B0F0D2E4CEAC76
53A842849A0C63DC6514A74AA6D3FBCF5C8B7911EE1A5CFF9EED8AEF7B6C18BB
CA642F6B5F64B0D66F2D4A415EF274F48291D56FDBE709AEF8A95F7D03F55D87
12FDE2290503BD648A94B4DCE33FD440D802782A34AFFB9A6AD1D26193B04AE2
3A854C8D03891F0D76190F12A8EA33F54ED43DA22F904647226B05F7FE1C3B47
48D0A496FB188276AB1CDBC72E2E9D965499F1CE613818802E689802BD96CDB7
0D8FAD80BE2F3E639DD0D3BE20
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSS8
%!PS-AdobeFont-1.0: CMSS8 003.002
%%Title: CMSS8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSS8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSS8 known{/CMSS8 findfont dup/UniqueID known{dup
/UniqueID get 5000801 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSS8 def
/FontBBox {-65 -250 1062 761 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSS8.) readonly def
/FullName (CMSS8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C295470093CA270C6258F0D99DCD775
734480114DD0CD2931DC18782C4CCB90B6906CE08BF4CAEC2D4283CD44730A2C
28919598227F98FC5524B0CC92540E349C5B190DF5F2317AE46FFB97221BDFA5
114C21D5E8FB0D1C298EDFF8836AD72A9B2AA132F52DD5D3F30427563C97CC46
D241B7024B4CD9F1E0037FFABCC88D8CCFDF3BC6EED778074F9590733CD147B2
5B68387E0F19E6A81961077BB7640A3C0E27ADD72556CF84ECD981ECCB64184C
EAB8BD9B96A873D80E3E0D5B4F5925983C80EBC3A8A12FBC452582A0B37D3C42
4DFD22E9BADDCD2E69644AA271EECF366D63FCC29522FD72D6C1EFDB3597E866
61443179872395E99024F152F6D6A4FD71BF1C7383BC1CC27AFD2DE3DAEFC06B
6BA837BBEBD0BE09F6AEA31A83B1B45255DFD6FF33362AF8BCABEBB0D944B3FA
B85FFBA0B370B9035460905432EE87395E518B4B670246FAFD535774467C059F
DC30EA01C95EFBA4ABB41711818E23D7E69D32BD63243A6D98666BD46E234155
BD6ABC76F551C31B6CE2E52323A9DAD5C003FB116AC8A82B46ACFC45EECCCAA9
E12C2C8E3CEEFD98D49ECFB824E8677BC9CE9B682BB5A7117174E4B2A0B925EE
553713780CDF3A3A4AF1560343A8A448C0B5DCC4E11EDF5ACBBA0BA8E5B899A3
7321AA7D4B283AC9234978C2DD81813653A96F2BD129FA5F355D56C4E50310D2
0FAA8F304D8BF333F97A6CD20CA4BA7BE6DC1446759683933BB1F1617AEAD131
1C9EF2212EE7EA9B64E5ABFF45E1727EE82C00FD371BE1387987236F9BDBA4ED
A966658ADF028B5DAD1F0878064221D0469BF17CB4E738258FB5D92E9D380C64
16E95BBA6A2BD9EEB1A187A7231C53BD8ABC9BAC46CA4AFA94A4920FA805F67A
A0C61940F6826CC4539A6CD1F9900EDC3F720AE4FA097F1D7510746BCE2E67B6
EA2F2046613785AAB89915655408AC9D03201838BBA44F421D5F25CFD88E56E8
1CA23CBEE9C2E323DF1866D31F309C92281E514A87A9631F33B238AC6520A20A
346DD6A206C3CAF2830FE244F2AC5D894686CAD5F4BD1CC51EC0B547603BFFC4
F008FDAEBC93542A43B7C907CC85046313348CC8A017C585CC370604E40AC820
8B9D8F57A01868FDC93551DE10FA83DDA3E49E44C32118ED90FA67AB1C66B3F9
F80CF71131977ACCF4DB44CF1EC26AB363C5F95FC2523B5DFBF4D60647EB23AC
89CB971DCDAB3BA26846BA9317C051011C37468B21B159412E69DCB84A9F5876
F418908678F38880B95A4BFD3566A6EDE93AE05BBDCB3C4E240A5C0A06301896
69FCCC0B65BB269F2E10609B6446A68E2DECA905FC26D4F502CAF0EE9AB15E60
CF42CEB376D92D80A6AEE55BCAB006999BF4415815D0F5BA3B1FF9D2E60201B5
833FABE8B883847ADACF9B032721DEEE7FEBB583B89066ED9608F1EFBCDD09D4
3F3C2B7B03154676151753DFF53815F2EC1517C094B0D2CC5EC483AA93772D24
AD3B0084537B91BE1913A31C70750C6DD707761DD733F9ECA552D3F26825B2B8
3EA263488892C929DEC07E2F988B7F7657D53CFA5542CE336D35B462E5E8649E
05973AA54C0A4E63552004E3C77E5FA77F821D820B1620CC8CB3EC5B1D7BA751
16CC155DEDD4DB0FFD3009729F365670DF9472435557201D8E82341B4056D2FC
5D2F7C57599249DA2A99A522868716B076320350FA7415C3B10D77A6E1DC77EE
2D929A038DE3EB4735A4D4F5C8C340D6D293D57E83C2F379ED0EEB16AA3A2A2C
ECD664E526D918A3D0A934170B6E1493843E6AAE87E850D70DE65D34AA2A36DE
8687D57A6B6B1447F9A4380CC3D4D11D54CBE762258426C46B8DE6059E6A2F31
E748549310FF4362129080CD98E70817A06422743780B86E11101BED14BB6569
D36903BA8BEBC24A478CD430801082CCF49382D6F04DE270D51CA5BAFEBD0F8D
901CDBCF10DB97E2B059C8CF7CDB45BF931203D5F8CA4622DF19682DE2BA7924
47F78908BDA23C4E21C0ACD2DA259B23648B6F233EEE830E7B82DF4371F55C30
71993EC2BCC7BD6411690B9B1621903F358450976D6B6EC6B505A593A9FB7D92
7223E2424DD5AABEFF254FBCEF934A4D51949BA0E8CD614AAA3AE6C3ED7B37BF
5324BD4998D8D5DA95E4741B753AEE580FB3913770C00277C9F609B4DF3D618F
148E0EC7A75218AD788F98D35989F3DB94413E70955EF586C0995A450BC75820
F5490EB55E5D0D21343565E1FA94FA64A74377F87E55EE0EDDC8F4286951A4EC
ED6FB3B444206D89BA71A9723E41E93A9F6C80240437019F3C23DFC2491A19D5
29762876AC60A14404493D04B5537C1E6FCA67B69DC1CD859F9C956FECF4461E
EC8B6CD5B5A89A8A838660A6C3F47B79ACE3B05C0AA2F17CF2DA947B893B42FF
749E2CD5E7B56823A119629931B1ECF65C51000A10412668877178F589B4DBCD
24D39F9219C46BDDD6F101C6AECFD3876056CBB858FE0C4BA2BD0B5FC26AD5BC
7FA9E295E72BEEEC721300567B6894FC48FFE5E3067C538CBB3B77E386F50D22
F8DCFDD0E335060CDFA49231D157981925F1CB36110809C12BA28D2D116116DE
01898E311FAACEE0E5402CA30B64D3D5A0CA33E417FC322F2F0BB7AD3FEE2039
56A15DD6D1E86971AD3A5A9A27F33AB62A5A3BF5660B59235398926D6BDA33BA
BC43B062EEF199E4ED991518A62AC374EE21E8F1E1C954BA6D1493388F708D0C
961612444BAE019E1DC18BDE900BD7A781835580A74DC696BC512F7BBDBA2D0C
ECE5D83A049F7A3286B94FC446DB5C3F33CA2CD3DDE2D0E774A579831CFDAC37
9612858EA613AE6939CED001EE662DB17642D0357B80BA0F82ED306218DA8505
A613CD622FA998EBCDFB7BC70F4E4C8F1F43241FC22FC5BB208F4B20311A98B2
73F30E4DFCEC93875CBD1ABD29ACF80585F59947F23A96D218C0CB8BDC1C49F5
70DF3D49704CBA9A23294A88A2AD61811450921B1E5C3C86435C55AF87AAF6A3
A13709082DA9C47D372A4226116342DECB14E4A4ADB7598321516DD637B64148
12AB17AC5B2EB25718856D50BFC8D64C78DA6E5C145187DB0325C30A42013A81
590E58E74094610207FC70BBF1A497395939B42A6EFCFABFD9D43221DE484753
DFE5311F1845592B4484B1CDFCC32B4E068B11A82BA189D2268D88FE63B9C6E9
20C9E40B543B5C401265D92A932476DAEADD4D3E2BD6E4DBEC0B30FA90A1924B
41D2EE9D8AF2D8CA79D15518141665B542C696C2507DD2F4D987EE5E22397FA8
FD80743186872DD67BE58103321467CF3F4B8898E66584DBB9688B9C78873CA2
9B72AD7406CDFE8B58FACA2904869FB0EF126DE299CAC08CB89F60561939D75C
2722CA57853372C14F5BCCA5C4FEBCEB0728BF9E30140E6B0D6C034195FCCC89
291CD818CF66757EAEB0AB5A9D5710988EBB052850DDE97BA0DC0B054BDF5172
2002AD6FFA44AA5D9D4EBDB6B2C04E8EF38660D9BC4C995BF37DE078C279328F
4C360B8EB337D798962CACBBDEA517A5EDFAADF0D445FBD1099837F9D689CD2C
E330CF587246387EDDED64A2F4C397C1B2BFC325B39114609EF57DDCD7B93C53
811ADEFA323C59441ABC447F683B5EC43870C057463DD502E9B9DA7084C3BBFB
2FB864D26DF1BA41ACC815F2A71E96D2C6F572E1F7E4A224FE57CD605682F98B
AC7BDE4B85A4C11D58981E981E9FC43B87A368BAEF78AD87B7DA0FE403AABFD1
CF414CBE75C0E9E257DADCBA035E1BF05C4E17FE92309F18633D93DF885956A9
6C27E77540F888B8336B61598CAB04F3B5A1767C1ACFE15D32A25E5B1BF51FFB
CF3CFB25CEE7DC95203CC44805A935D5A9154A89FBD4E465F0E599EED4033365
0A31612F37BDAE8CC85BBC67F7E375EA68C2982FFD89284B027501184C4D2232
CE0FE4E905C4B504EAD009F047FE627C79AF9EEDD65D00A3858F88E699E5EB45
4957086CB22776AD06C317DEA41880D88F0EDCF71B4ED76BEE665B7937D5D0F0
E568C7615025172086BDBD69670EA154CC52C85CBFFE88C1A4D1AFB6624EE667
1B5BE2A31FCE8B2A4B03BC5DC57280199CC0970EBB636DDF8DF54C4A8CC8805C
AD63CE866FB20C64725AE4BC9F0EB275BD83EC89F2F9CE23A084B45694D8C3E9
3F3D3C1A678690877E8B1B77ED85D4F6E03DBF1F3B1D177E330475F172E0E729
63EAD8034E6100B2A5773E2605180629972DE6BAC0A8C2F9580E9F1D2E77791F
E1D33C2DBED3FAC47DDF1B74FD02583C3CFDBB2D1CC2B735C02B14B7AD3733CA
1682944ECFAD673A9AD5E80B6248FBB6E5036EA7FE5CA8C34FBCA6DBD0E76EB6
C2CB89D9815DB3C45742170DA926E03493AD86BB19A1D3FC623BDF1C920684FB
7414EF69CF39713A9495D8CB678BD4592B53C36BC6CF93505B8E32311D42532B
5661051B855F01A9B3D77AE38879853AF0FFE2448368DDFA3EF1DEB88AA055B7
91459586DD2DFEDA192306DF7143F998CC5D67C1CED313430E5CC3F9CE265747
8582102111E7AF9FB94D95B82D8E1DF01F04F2A2C22A20207B59C8976D56833F
E3B79DCB727EE7537476A052E92F7C3D6A625AAED8F026F22AB59EC0F86E541F
BC082D8E35234A18192862EFD232C9950B1FE0BCB91209FB540DC5729B9E36B9
94D0913A8F01FB6CB16DE85E6B89F144111B1D911DC527C24917D909F1CF501C
1AF2923EF71530F21F9BF049A56C7AB3249A420C28954E981EC464F61FA167A5
C6084661808089EE7DBD80A2D92FF4040B37B2D81A2F5A568D461BE1C62B0FD1
BF6D1063D2B5DB9CD48BB2B2AC9CEFA543E0AC5C86C462399C1E82F25A157282
D32D538029ED22CC5935E63FA076BE22D3F53B7D7CCDD344D68B4E73F87A5F2C
691FE68C981FF7CCFB124506FEF93F36F7181075D7BC6FEEC0E35AF57855BAB2
44AF021C7AD8912D884424E8BAEC68A5562B881793A1B47FD338B1EE4C0B8583
2867C78DBC2EFC8BA1431DB1C8622C99BB2C2D4D5475BFCE87B11762427867B5
7253463C6F2E1CF5F1DC1F7851F2EF6A957CAB0C0A55076C59A6FF9237917C08
5F97C2CB4B5CC903B76BE8C057018CD962EF90E1C0CCEECD52F2AE35A94C6EF2
D99DF4DA88247C920623978A1DBB81D8F171B588D617AFA8285F6147E889523F
CF11EF4BE498842D3BF8E811B4B33131416658E03293AD911516D8AED556F7E8
0181391AF36D862F5F8B4588BC99585BFF0F1ADE4BF73320158DBACB2784768D
D9794E2B0F2C0696E5ECE5C7A7DE78EB5CAE85EEA244D43D0280D4C87B6B93F4
803718596FBCDB61A0BFC2DC666128E56F3133B9D4F16305940B50ECF66D80BA
06C0A73C02F689314F1B4FAC22D16BB1E414C6F0A1A548AAB1364D2CD9DDFE5E
C8887964D26BE84986A6B1246BC306E6343CA376F990B77BE8D68A4E54304C3F
250B2311586A1D1EAD2C0221FE1828CE8396DEDEF13E70E0AA75FFB6089DBA9E
9FC3FAB43B3633C8EE7598619A0C6FAE2F25274787348E3660D0EB7212F5CB38
032A41A54FDF14B32E721819AEEC54E8FDE3AB8F0ACEA267B01081F284B008C0
5861CEB5C236729AA17DC78E92FE1EF9F047B53A59F2D1D6A6734D0413D1A51F
75B03234F4775523A55978C73D5BF9031EE8BC6BF9E2637DAC07F5AAF2A6C41F
77620B272300A78E86F71F16EBCE2DBFEF4920BD3F16C282E0BA4C872E5F7E52
7ED2B663FE45D4A36A588D228D32E2861F26AA6FA8DDBC8110F4417D0DF29285
F06B57B1720D0D13828A4DD68D57BD530FEB9C3CF305594B70E4394BD60C82DE
A64EC17661977B18199BA661C48860919CBEB56AB6C32848D51733F1E959EA35
DFFD823D92F11065C643AA69776F71163A60D4941B753BBB4A4C0C47BB1D965D
06C9BA1FDAE47926F37C0C5B591058F68FC1DF3933B2BE014F99A53A617A19CD
8BE011234D48CB7E14D31B02B1FC47C8BFBF04C4409D32CB454E8FA0EF9AF16B
8AFE9FDDC41F6A23D700D4AA922A0316A895D240C5595F21FEBA98FE0E74B762
77FCC80F4950A8C55B4A008FD381E9C0EDF4427CB324BE4ABFC790CEB53E8BBE
AA90163A7BB19E2840FDA404E830F5478DD69B85C5E69573D8CDBBDFF41A8126
24A6AB66333C749C35BE314777CC222D54FF2C4C75717FB938724EEDDFC2EC1A
8DA77B5482E760B68F0A2D240332BD48803004BC157C6E8E192D512CE83D5572
D388BAE80AAF5E7240A73CDA7CFF7F8CDAA4ABE1D3BF6ECC3641B6BD1C2CC703
275D48D62A15E5A85F003E76D1EA7DB65E3476CCCF6B504514AEB1FF1263FDB9
81FBF1A1873FC287FC6B6DB11F0FB463637D4F3280EBD19976588F900B956FB4
36AAA8C1F040300CAB9C4F624B22C1D3D6414B7CAD36B5AEEC90105B5A5C2129
4CD540B9D0129813BE7E20870365F8C46FEC92DDB64D0A6C7C5B9867A4592B7C
124B1B47899CE2D1C03811AD1B8BA253B0D29DAF2B53E312827478DBA274010F
C919D122DF24C1E372F7F3CA77A2C0EDCDB2635F4136EA0C202D4011346902E5
1524609DC031656660302CA36D376245A64135890C13A11C0085861792384787
D0831FA01C11F1E7B4429DDAA0B3A7EC1DC3CFEA24C34DA4BC993300F12A953E
80C8BDA360789FCB0F1AEEA7AAC310D0C3C56F43F7914C3B037DA02C31EB740F
2B1A696E0E5553656942BA567DC9C4D3CA06E45EA615B7B5674016DCFA07C0B4
285BFD9D551117A357F4BEFD58BCE60661187A5FF20D27D685B24BEEF563F0C2
B2CFA2565112F7F49023CDD405AF3E54FF994630BE678B0D6E1CED514FC93F7F
63710D289026CEE4B074253E7E0AB1DCCAB57DA7A1E2050D2B8D3D75F2AD7423
0B0A7081DB1FA44055620B0A2CAA54666C5EEE3C01540D96ACAAE98644E1D210
E0E020214550D723431813C031DC7DF0D177E82AE49798F8E0E5AE0BB8FF664E
4793F857BA380297AFB977065B7500E4C0AA1735AF4E15703C860A016F19E593
319D14C497F24ED8E42F3FFEBE976DF33D697656DC11A8A7C6A60219BF63F186
E0FFE55594B31E5C312DBCCA08E84E94E8BF57CD5F5B70EBE59F0D41DD3F6B05
F7635EA92FA9E082C80075A5A5F684160AADAD501BBFA7746327E3E606D1FAC8
EF7AE7C612371BB52FFF41A97A349D111E861A83C9C48B0145ABC3582FCE43C5
D121F0EB6F5D219E52E2BB660AA1DA5551D6B66A732628D640BF9D8BDE2BB3BA
046FBFE2E28DB31AEA2ED8F9405A39C16C3800E9B5611B460BE0F6716F2BF79C
902AD4FA3B6656E13E9DD7A785C17F28BD4D646D66058721610CD756E0D18D32
F09C740B6023DFAD45A718BBFB2E65544D4754A5DB23CC7988A3EF45CD3786F9
E100D9684549A16BC2DB736D43C293097E082A968C27F0C120C41A53E3464381
F7DCFA8B36344EDA85F53FF65BCDACCDE7EAA41A6D38C1F420F8F2E287AB0F98
A0DF7D8A6CF2E4C78D606569BFB7C51495493FACED57CF2D507DDD366247D807
28D73CBBDE2F4F666099411B1FD2CF7B93D0E9AA161024C58892285BCAA65E55
9FB37468777706D2C57A0DF6D520844B56D62CD10F2D7B02D17F97E4F87C16F3
9BA09013FBD7ED8C2DBBB432288E598241369B9DA6E3EE324290D73BDBFB5448
E9D7142036C0FE538F18E866A50DD23152E2C096E1045E7777888AF5CEFB83B1
C6FCA18A26E83D75AB66291A5A5A285DBB1B9525919564600D71A767BB03A8BC
7BF24CC3B318BBC0F40C79835DE6236D0EF3FD4ECD949F2A837D13922F12FEFE
0AA5201A69D83B40E9CF408A063F562BE0F5817493916FF8631ACAE4F5582F33
B2E198934214322C90D2DA9385C5378AC3F83D0D9600BD4D219AD9426E32B446
CD409697734840F8BD0B8DBAE5DEAE4A2FE1EFEC2DCFA57BB0D6E3DD6C027501
BE9E20CB160B6BC81ED4696D66169BDC648AAE383D10F3E9CEB691AA725EFF8E
BB73F7588F2963004E47F96B61BA0F88E99544E109918AB0BDCA96B4ED591198
8ACCD6357281BA2643028A304E0EE4C8F09A260BFCE7C040D10575084BC08182
1FB7512E7C9F70C6B28C80BE87F92E37C939AFF3EA59B9C6F15E0F0B55B5AF9F
FC5ADD3D2B5BA7E164B1EFE9CCF9A45B3241BD9CC3EB1E8FEA788DB1C7EA3D87
3773EB713B0A0CBBC22A3CDE08B92ACB9870D08BEE7FEFD08590BC06D039726A
99E96C518EFF7EF8A5929793E7DD5F8F2D2A4631E686A37B970CE01F79D41E1F
2DBA807E4CF4A5FC87840E30E8A14150B4CFA622074B3D3BE38D9FB479DE35A8
7DE3E18E725A0E4DEE4D9332B9396240D95D5216E6AF9E403AF32ED72F66AB6A
AACB8864FD4E3C658B5073E2A2220E1FC92FABA33638E71CC98969C027D224C8
2A74E45AAFE76385AF5C28467BC2DEC856C9D7186131F75215868666BAFCDF62
7BAC76FD86009A6B9DDAD4B3F765B5A3F5A4C645708EF566D3DA9184D08E45F0
89BA5608C59D18
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 23867906 17900936 1000 600 600
(/Users/juste/ComplexSystems/UrbanEvolution/Docs/Seminars/20201209_UTorontoUGP/communication/.texpad)
@start /Fa 134[24 3[26 13 1[16 26 1[26 26 39 11 1[11
11 26 1[13 26 1[24 26 26 11[34 2[34 1[32 3[26 1[24 2[37
3[34 1[32 8[26 3[26 26 26 26 26 6[16 16 40[{
 TeXBase1Encoding ReEncodeFont }33 47.3224 /NimbusSanL-Regu
rf /Fb 138[47 47 1[47 4[47 47 47 47 47 5[47 47 47 32[47
17[47 46[{ T1Encoding ReEncodeFont }13 90.9091 /SFTT1095
rf /Fc 252[33 3[{}1 66.4176 /CMSY10 rf /Fd 211[20 44[{}1
66.4176 /CMSS8 rf /Fe 22[35 111[32 32 1[32 35 18 32 21
1[35 35 35 53 14 2[14 35 35 18 35 35 32 1[35 11[46 1[42
46 1[42 1[46 53 35 2[18 1[49 3[46 1[42 8[35 1[35 35 35
35 35 35 35 2[21 18 44[{ TeXBase1Encoding ReEncodeFont }42
63.0965 /NimbusSanL-Regu rf /Ff 134[43 2[43 48 24 43
29 2[48 48 72 19 1[19 19 48 1[24 48 1[43 48 48 11[62
53 58 62 1[58 5[43 2[67 2[62 62 9[48 6[48 1[48 1[24 1[24
44[{ TeXBase1Encoding ReEncodeFont }32 86.3632 /NimbusSanL-Regu
rf /Fg 137[57 63 32 57 38 63 1[63 63 95 25 1[25 25 1[63
32 63 63 57 63 63 11[82 2[82 1[76 2[95 3[32 1[88 3[82
1[76 65[{ TeXBase1Encoding ReEncodeFont }27 113.574 /NimbusSanL-Regu
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -481 -608 a
SDict begin H.S end
 -481 -608
a -481 -608 a
SDict begin H.R end
 -481 -608 a -481 -608 a
SDict begin [/View [/XYZ H.V]/Dest (Navigation1) cvn /DEST pdfmark
end
 -481 -608 a -481
-608 a
SDict begin H.S end
 -481 -608 a -481 -608 a
SDict begin H.R end
 -481 -608 a -481 -608
a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -481 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 0 0 1 TeXcolorcmyk 0 0 0 1
TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk
-600 1668 3024 2268 v 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 0 0 1
TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 0 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 0.4 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
Black 0 TeXcolorgray -473 -600 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -473 -600 a -473 -600
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -473 -600 a -473 -600 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -473 -600 a -473 -600 a
SDict begin [/Count 0/Dest (Outline0.1) cvn/Title (General comments)
/OUT pdfmark end
 -473
-600 a -473 -600 a
SDict begin [/Count 0/Dest (Outline0.2) cvn/Title (Specific comments)
/OUT pdfmark end
 -473 -600 a -473 -600 a
SDict begin [/Count 0/Dest (Outline0.3) cvn/Title (Discussion) /OUT
pdfmark end
 -473 -600
a -473 -600 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -473 -600 a -473 -600 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -473 -600 a -473
-600 a
SDict begin H.S end
 -473 -600 a -473 -600 a
SDict begin 13.6 H.A end
 -473 -600 a -473 -600
a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -473 -600 a -473 -600 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with Beamer class)/Author ()/Keywords () /DOCINFO pdfmark end
 -473 -600 a -473 -600 a
SDict begin [ {Catalog} <</PageLabels<</Nums[0<</P(1)>>1<</P(2)>>2<</P(3)>>3<</P(4)>>]>>>>
/PUT pdfmark end
 -473
-600 a 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1
TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0.32 0.42 0 0.55 TeXcolorcmyk 0.32 0.42 0 0.55 TeXcolorcmyk
-473 -59 2770 241 v 0.32 0.42 0 0.55 TeXcolorcmyk 0 0 0 1
TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 2 -149 a Fg(A)31 b(Cr)r(itique)h(of)f
(Urban)h(Genome)g(Project)p 0 0 0 1 TeXcolorcmyk 0.32 0.42 0 0.55
TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
582 180 a Ff(J)m(.)25 b(Raimbault)1059 147 y Fe(1)p Fd(,)p
Fe(2)p Fd(,)p Fe(3)p Fc(\003)400 310 y(\003)437 343 y
Fb(j.raimbault@ucl.ac.uk)p 0 0 0 1 TeXcolorcmyk 0 0 0 1
TeXcolorcmyk -7 538 a Fa(1)24 562 y Fe(Center)16 b(f)n(or)i(Adv)n
(anced)f(Spatial)h(Analysis)o(,)e(Univ)n(ersity)g(College)h(London)194
617 y Fa(2)224 641 y Fe(UPS)g(CNRS)g(3611)g(Comple)n(x)g(Systems)e
(Institute)h(P)m(ar)q(is)399 696 y Fa(3)430 720 y Fe(UMR)g(CNRS)g(8504)
i(G\351og)o(r)o(aphie-cit\351s)p 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 305 939 a Ff(Urban)24 b(Genome)g(Project)g
(seminar)197 1052 y(Univ)n(ersity)h(of)f(T)-10 b(oronto)m(,)23
b(School)h(of)g(Cities)533 1165 y(December)g(9th)g(2020)p
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 0 TeXcolorcmyk 0.32 0.42 0 0.55 TeXcolorcmyk 0.32 0.42 0 0.55
TeXcolorcmyk -600 1668 1008 81 v 0.32 0.42 0 0.55 TeXcolorcmyk
0 0 0 0 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk -279 1643 a
Fa(Raimbault)k(\(UCL\))p 0 0 0 0 TeXcolorcmyk 0.32 0.42 0 0.55
TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 0.32 0.42 0 0.55 TeXcolorcmyk
0.32 0.42 0 0.55 TeXcolorcmyk 408 1668 V 0.32 0.42 0 0.55
TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk
533 1653 a
SDict begin H.S end
 533 1653 a 0 0 0 0 TeXcolorcmyk -10 x Fa(A)12
b(Cr)q(itique)h(of)h(Urban)g(Genome)h(Project)p 0 0 0 0
TeXcolorcmyk 1291 1608 a
SDict begin H.R end
 1291 1608 a 1291 1643 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation4) cvn H.B /ANN pdfmark end
 1291
1643 a 0 0 0 0 TeXcolorcmyk 0.32 0.42 0 0.55 TeXcolorcmyk
0 0 0 0 TeXcolorcmyk 0.32 0.42 0 0.55 TeXcolorcmyk 0.32 0.42 0 0.55
TeXcolorcmyk 1416 1668 1008 81 v 0.32 0.42 0 0.55 TeXcolorcmyk
0 0 0 0 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 574 w Fa(J)o(uly)d(18th)i
(2020)p 0 0 0 0 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 123
w(1)p 2332 1653 3 52 v 29 w(4)p 0 0 0 0 TeXcolorcmyk
0 0 0 0 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 0.32 0.42 0 0.55
TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 0 0 1 TeXcolorcmyk 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0
a -481 -608 a
SDict begin H.S end
 -481 -608 a -481 -608 a
SDict begin H.R end
 -481 -608 a -481
-608 a
SDict begin [/View [/XYZ H.V]/Dest (Navigation2) cvn /DEST pdfmark
end
 -481 -608 a -481 -608 a
SDict begin H.S end
 -481 -608 a -481 -608
a
SDict begin H.R end
 -481 -608 a -481 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -481 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 0 0 1
TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 0 TeXcolorcmyk -600 1668 3024 2268 v 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end

2424 1668 a 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 0.4 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk -473 -600 a
SDict begin H.S end

-473 -600 a -473 -600 a
SDict begin 13.6 H.A end
 -473 -600 a -473 -600 a
SDict begin [/View [/XYZ H.V]/Dest (Outline0.1) cvn /DEST pdfmark end
 -473
-600 a 0 0 0 1 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 0 0 0 0
TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 313 x Fg(Modeling)33
b(urban)f(e)m(v)m(olution)p 0 0 0 0 TeXcolorcmyk 0 0 0 0
TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk
0.32 0.42 0 0.55 TeXcolorcmyk 0.32 0.42 0 0.55 TeXcolorcmyk
-600 1668 1008 81 v 0.32 0.42 0 0.55 TeXcolorcmyk 0 0 0 0
TeXcolorcmyk 0 0 0 0 TeXcolorcmyk -279 1643 a Fa(Raimbault)c(\(UCL\))p
0 0 0 0 TeXcolorcmyk 0.32 0.42 0 0.55 TeXcolorcmyk 0 0 0 0
TeXcolorcmyk 0.32 0.42 0 0.55 TeXcolorcmyk 0.32 0.42 0 0.55
TeXcolorcmyk 408 1668 V 0.32 0.42 0 0.55 TeXcolorcmyk
0 0 0 0 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 533 1653 a
SDict begin H.S end

533 1653 a 0 0 0 0 TeXcolorcmyk -10 x Fa(A)12 b(Cr)q(itique)h(of)h
(Urban)g(Genome)h(Project)p 0 0 0 0 TeXcolorcmyk 1291
1608 a
SDict begin H.R end
 1291 1608 a 1291 1643 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1291 1643 a 0 0 0 0 TeXcolorcmyk
0.32 0.42 0 0.55 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 0.32 0.42 0 0.55
TeXcolorcmyk 0.32 0.42 0 0.55 TeXcolorcmyk 1416 1668
1008 81 v 0.32 0.42 0 0.55 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk
0 0 0 0 TeXcolorcmyk 574 w Fa(J)o(uly)d(18th)i(2020)p
0 0 0 0 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 123 w(2)p 2332
1653 3 52 v 29 w(4)p 0 0 0 0 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk
0 0 0 0 TeXcolorcmyk 0.32 0.42 0 0.55 TeXcolorcmyk 0 0 0 0
TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 0 0 1 TeXcolorcmyk 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0
a -481 -608 a
SDict begin H.S end
 -481 -608 a -481 -608 a
SDict begin H.R end
 -481 -608 a -481
-608 a
SDict begin [/View [/XYZ H.V]/Dest (Navigation3) cvn /DEST pdfmark
end
 -481 -608 a -481 -608 a
SDict begin H.S end
 -481 -608 a -481 -608
a
SDict begin H.R end
 -481 -608 a -481 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -481 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 0 0 1
TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 0 TeXcolorcmyk -600 1668 3024 2268 v 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end

2424 1668 a 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 0.4 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk -473 -600 a
SDict begin H.S end

-473 -600 a -473 -600 a
SDict begin 13.6 H.A end
 -473 -600 a -473 -600 a
SDict begin [/View [/XYZ H.V]/Dest (Outline0.2) cvn /DEST pdfmark end
 -473
-600 a -473 -600 a
SDict begin H.S end
 -473 -600 a -473 -600 a
SDict begin 13.6 H.A end
 -473 -600
a -473 -600 a
SDict begin [/View [/XYZ H.V]/Dest (Outline0.3) cvn /DEST pdfmark end
 -473 -600 a 0 0 0 1 TeXcolorcmyk 0 0 0 1
TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 0.32 0.42 0 0.55 TeXcolorcmyk
0.32 0.42 0 0.55 TeXcolorcmyk -600 1668 1008 81 v 0.32 0.42 0 0.55
TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk
-279 1643 a Fa(Raimbault)28 b(\(UCL\))p 0 0 0 0 TeXcolorcmyk
0.32 0.42 0 0.55 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 0.32 0.42 0 0.55
TeXcolorcmyk 0.32 0.42 0 0.55 TeXcolorcmyk 408 1668 V
0.32 0.42 0 0.55 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 0 0 0 0
TeXcolorcmyk 533 1653 a
SDict begin H.S end
 533 1653 a 0 0 0 0 TeXcolorcmyk
-10 x Fa(A)12 b(Cr)q(itique)h(of)h(Urban)g(Genome)h(Project)p
0 0 0 0 TeXcolorcmyk 1291 1608 a
SDict begin H.R end
 1291 1608 a 1291 1643
a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1291 1643 a 0 0 0 0 TeXcolorcmyk 0.32 0.42 0 0.55 TeXcolorcmyk
0 0 0 0 TeXcolorcmyk 0.32 0.42 0 0.55 TeXcolorcmyk 0.32 0.42 0 0.55
TeXcolorcmyk 1416 1668 1008 81 v 0.32 0.42 0 0.55 TeXcolorcmyk
0 0 0 0 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 574 w Fa(J)o(uly)d(18th)i
(2020)p 0 0 0 0 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 123
w(3)p 2332 1653 3 52 v 29 w(4)p 0 0 0 0 TeXcolorcmyk
0 0 0 0 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 0.32 0.42 0 0.55
TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 0 0 1 TeXcolorcmyk 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0
a -481 -608 a
SDict begin H.S end
 -481 -608 a -481 -608 a
SDict begin H.R end
 -481 -608 a -481
-608 a
SDict begin [/View [/XYZ H.V]/Dest (Navigation4) cvn /DEST pdfmark
end
 -481 -608 a -481 -608 a
SDict begin H.S end
 -481 -608 a -481 -608
a
SDict begin H.R end
 -481 -608 a -481 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 -481 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 0 0 1
TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 0 TeXcolorcmyk -600 1668 3024 2268 v 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end

2424 1668 a 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 0.4 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 0 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk
-473 -287 a Fg(Ref)m(erences)p 0 0 0 0 TeXcolorcmyk 31
w(I)p 0 0 0 0 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 0 0 0 0
TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk
0.32 0.42 0 0.55 TeXcolorcmyk 0.32 0.42 0 0.55 TeXcolorcmyk
-600 1668 1008 81 v 0.32 0.42 0 0.55 TeXcolorcmyk 0 0 0 0
TeXcolorcmyk 0 0 0 0 TeXcolorcmyk -279 1643 a Fa(Raimbault)28
b(\(UCL\))p 0 0 0 0 TeXcolorcmyk 0.32 0.42 0 0.55 TeXcolorcmyk
0 0 0 0 TeXcolorcmyk 0.32 0.42 0 0.55 TeXcolorcmyk 0.32 0.42 0 0.55
TeXcolorcmyk 408 1668 V 0.32 0.42 0 0.55 TeXcolorcmyk
0 0 0 0 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 533 1653 a
SDict begin H.S end

533 1653 a 0 0 0 0 TeXcolorcmyk -10 x Fa(A)12 b(Cr)q(itique)h(of)h
(Urban)g(Genome)h(Project)p 0 0 0 0 TeXcolorcmyk 1291
1608 a
SDict begin H.R end
 1291 1608 a 1291 1643 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1291 1643 a 0 0 0 0 TeXcolorcmyk
0.32 0.42 0 0.55 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 0.32 0.42 0 0.55
TeXcolorcmyk 0.32 0.42 0 0.55 TeXcolorcmyk 1416 1668
1008 81 v 0.32 0.42 0 0.55 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk
0 0 0 0 TeXcolorcmyk 574 w Fa(J)o(uly)d(18th)i(2020)p
0 0 0 0 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk 123 w(4)p 2332
1653 3 52 v 29 w(4)p 0 0 0 0 TeXcolorcmyk 0 0 0 0 TeXcolorcmyk
0 0 0 0 TeXcolorcmyk 0.32 0.42 0 0.55 TeXcolorcmyk 0 0 0 0
TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
